import { useCallback, useEffect } from "react";
export const useOutsideClickHandler = (open, setOpen, refs) => {
    const handleFocusIn = useCallback((e) => {
        var _a, _b, _c;
        const composed = (_b = (_a = e.composedPath) === null || _a === void 0 ? void 0 : _a.call(e)) === null || _b === void 0 ? void 0 : _b[0];
        if (!(e === null || e === void 0 ? void 0 : e.target) || !((_c = e === null || e === void 0 ? void 0 : e.target) === null || _c === void 0 ? void 0 : _c.nodeType) || !composed) {
            return;
        }
        if (!refs.some((element) => (element === null || element === void 0 ? void 0 : element.contains(e.target)) || (element === null || element === void 0 ? void 0 : element.contains(composed)))) {
            open && setOpen(false);
        }
    }, [open, refs, setOpen]);
    useEffect(() => {
        window.addEventListener("focusin", handleFocusIn);
        window.addEventListener("pointerdown", handleFocusIn);
        return () => {
            var _a, _b;
            (_a = window === null || window === void 0 ? void 0 : window.removeEventListener) === null || _a === void 0 ? void 0 : _a.call(window, "focusin", handleFocusIn);
            (_b = window === null || window === void 0 ? void 0 : window.removeEventListener) === null || _b === void 0 ? void 0 : _b.call(window, "pointerdown", handleFocusIn);
        };
    }, [handleFocusIn]);
};
//# sourceMappingURL=useOutsideClickHandler.js.map
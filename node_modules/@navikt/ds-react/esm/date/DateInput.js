var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CalendarIcon } from "@navikt/aksel-icons";
import cl from "clsx";
import React, { forwardRef } from "react";
import { BodyShort, ErrorMessage, Label, omit } from "..";
import { useFormField } from "../form/useFormField";
import { useDateInputContext } from "./context";
import { ReadOnlyIcon } from "../form/ReadOnlyIcon";
const DateInput = forwardRef((props, ref) => {
    const { className, hideLabel = false, label, description, variant = "datepicker" } = props, rest = __rest(props, ["className", "hideLabel", "label", "description", "variant"]);
    const isDatepickerVariant = variant === "datepicker";
    const conditionalVariables = {
        prefix: isDatepickerVariant ? "datepicker-input" : "monthpicker-input",
        iconTitle: {
            open: isDatepickerVariant ? "Åpne datovelger" : "Åpne månedsvelger",
            close: isDatepickerVariant ? "Lukk datovelger" : "Lukk månedsvelger",
        },
    };
    const { onOpen, ariaId, open } = useDateInputContext();
    const { inputProps, size = "medium", inputDescriptionId, errorId, showErrorMsg, hasError, readOnly, } = useFormField(props, conditionalVariables.prefix);
    return (React.createElement("div", { className: cl(className, "navds-form-field", `navds-form-field--${size}`, "navds-date__field", {
            "navds-text-field--error": hasError,
            "navds-date__field--error": hasError,
            "navds-form-field--disabled": !!inputProps.disabled,
            "navds-text-field--disabled": !!inputProps.disabled,
            "navds-form-field--readonly": readOnly,
            "navds-text-field--readonly": readOnly,
            "navds-date__field--readonly": readOnly,
        }) },
        React.createElement(Label, { htmlFor: inputProps.id, size: size, className: cl("navds-form-field__label", {
                "navds-sr-only": hideLabel,
            }) },
            React.createElement(ReadOnlyIcon, { readOnly: readOnly }),
            label),
        !!description && (React.createElement(BodyShort, { as: "div", className: cl("navds-form-field__description", {
                "navds-sr-only": hideLabel,
            }), id: inputDescriptionId, size: size }, description)),
        React.createElement("div", { className: "navds-date__field-wrapper" },
            React.createElement("input", Object.assign({ ref: ref }, omit(rest, ["error", "errorId", "size"]), inputProps, { autoComplete: "off", "aria-controls": open ? ariaId : undefined, readOnly: readOnly, className: cl("navds-date__field-input", "navds-text-field__input", "navds-body-short", `navds-body-short--${size}`), size: 14 })),
            React.createElement("button", { disabled: inputProps.disabled || readOnly, tabIndex: readOnly ? -1 : open ? -1 : 0, onClick: () => onOpen(), type: "button", className: "navds-date__field-button" },
                React.createElement(CalendarIcon, { pointerEvents: "none", title: open
                        ? conditionalVariables.iconTitle.close
                        : conditionalVariables.iconTitle.open }))),
        React.createElement("div", { className: "navds-form-field__error", id: errorId, "aria-relevant": "additions removals", "aria-live": "polite" }, showErrorMsg && React.createElement(ErrorMessage, { size: size }, props.error))));
});
export const DatePickerInput = forwardRef((props, ref) => React.createElement(DateInput, Object.assign({}, props, { ref: ref })));
export const MonthPickerInput = forwardRef((props, ref) => React.createElement(DateInput, Object.assign({}, props, { variant: "monthpicker", ref: ref })));
//# sourceMappingURL=DateInput.js.map
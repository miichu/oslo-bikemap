var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import isWeekend from "date-fns/isWeekend";
import React, { forwardRef, useRef, useState } from "react";
import { DayPicker, isMatch, } from "react-day-picker";
import { Popover, omit, useId } from "../..";
import { DatePickerInput } from "../DateInput";
import { DateContext } from "../context";
import { getLocaleFromString, labels } from "../utils";
import DatePickerStandalone from "./DatePickerStandalone";
import Caption from "./parts/Caption";
import DayButton from "./parts/DayButton";
import DropdownCaption from "./parts/DropdownCaption";
import { HeadRow } from "./parts/HeadRow";
import Row from "./parts/Row";
import TableHead from "./parts/TableHead";
import WeekNumber from "./parts/WeekNumber";
/**
 * A component that allows users to select a date from a calendar.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/datepicker)
 * @see 🏷️ {@link DatePickerProps}
 *
 * @example
 * ```jsx
 *  const { inputProps, datepickerProps } = useMonthpicker({
 *    onMonthChange: console.log,
 *  });
 *
 *  return (
 *     <DatePicker {...datepickerProps} dropdownCaption>
 *       <DatePicker.Input
 *         {...inputProps}
 *         label="Velg dato"
 *       />
 *     </DatePicker>
 *  );
 * ```
 */
export const DatePicker = forwardRef((_a, ref) => {
    var _b;
    var { children, locale = "nb", dropdownCaption, disabled = [], disableWeekends = false, showWeekNumber = false, selected, id, defaultSelected, className, wrapperClassName, open: _open, onClose, onOpenToggle, strategy, bubbleEscape = false, onWeekNumberClick } = _a, rest = __rest(_a, ["children", "locale", "dropdownCaption", "disabled", "disableWeekends", "showWeekNumber", "selected", "id", "defaultSelected", "className", "wrapperClassName", "open", "onClose", "onOpenToggle", "strategy", "bubbleEscape", "onWeekNumberClick"]);
    const ariaId = useId(id);
    const [open, setOpen] = useState(_open !== null && _open !== void 0 ? _open : false);
    const wrapperRef = useRef(null);
    const [selectedDates, setSelectedDates] = React.useState(defaultSelected);
    const mode = (_b = rest.mode) !== null && _b !== void 0 ? _b : "single";
    /**
     * @param selected Date | Date[] | DateRange | undefined
     */
    const handleSelect = (selected) => {
        var _a, _b, _c;
        setSelectedDates(selected);
        if (rest.mode === "single") {
            selected && ((_a = onClose === null || onClose === void 0 ? void 0 : onClose()) !== null && _a !== void 0 ? _a : setOpen(false));
        }
        else if (rest.mode === "range") {
            (selected === null || selected === void 0 ? void 0 : selected.from) && (selected === null || selected === void 0 ? void 0 : selected.to) && ((_b = onClose === null || onClose === void 0 ? void 0 : onClose()) !== null && _b !== void 0 ? _b : setOpen(false));
        }
        (_c = rest === null || rest === void 0 ? void 0 : rest.onSelect) === null || _c === void 0 ? void 0 : _c.call(rest, selected);
    };
    return (React.createElement(DateContext.Provider, { value: {
            open: _open !== null && _open !== void 0 ? _open : open,
            onOpen: () => {
                setOpen((x) => !x);
                onOpenToggle === null || onOpenToggle === void 0 ? void 0 : onOpenToggle();
            },
            ariaId,
        } },
        React.createElement("div", { ref: wrapperRef, className: cl("navds-date__wrapper", wrapperClassName) },
            children,
            (_open !== null && _open !== void 0 ? _open : open) && (React.createElement(Popover, { arrow: false, anchorEl: wrapperRef.current, open: _open !== null && _open !== void 0 ? _open : open, onClose: () => {
                    var _a;
                    (_a = onClose === null || onClose === void 0 ? void 0 : onClose()) !== null && _a !== void 0 ? _a : setOpen(false);
                }, placement: "bottom-start", id: ariaId, role: "dialog", ref: ref, strategy: strategy, className: "navds-date__popover", bubbleEscape: bubbleEscape },
                React.createElement(DayPicker, Object.assign({ locale: getLocaleFromString(locale), mode: mode, onSelect: handleSelect, selected: selected !== null && selected !== void 0 ? selected : selectedDates, components: {
                        Caption: dropdownCaption ? DropdownCaption : Caption,
                        Head: TableHead,
                        HeadRow,
                        WeekNumber,
                        Row,
                        Day: DayButton,
                    }, className: cl("navds-date", className), classNames: {
                        vhidden: "navds-sr-only",
                    }, disabled: (day) => {
                        return ((disableWeekends && isWeekend(day)) ||
                            isMatch(day, disabled));
                    }, weekStartsOn: 1, initialFocus: false, labels: labels, modifiers: {
                        weekend: (day) => disableWeekends && isWeekend(day),
                    }, modifiersClassNames: {
                        weekend: "rdp-day__weekend",
                    }, showWeekNumber: showWeekNumber, onWeekNumberClick: mode === "multiple" ? onWeekNumberClick : undefined, fixedWeeks: true, showOutsideDays: true }, omit(rest, ["onSelect"]))))))));
});
DatePicker.Standalone = DatePickerStandalone;
DatePicker.Input = DatePickerInput;
export default DatePicker;
//# sourceMappingURL=DatePicker.js.map
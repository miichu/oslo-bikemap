import React from "react";
import cl from "clsx";
import { BodyShort, Label, Loader } from "../../..";
import { CheckmarkIcon, PlusIcon } from "@navikt/aksel-icons";
import { useFilteredOptionsContext } from "./filteredOptionsContext";
import { useSelectedOptionsContext } from "../SelectedOptions/selectedOptionsContext";
import { useInputContext } from "../Input/inputContext";
const FilteredOptions = () => {
    const { inputProps: { id }, size, value, } = useInputContext();
    const { allowNewValues, isLoading, isListOpen, filteredOptions, filteredOptionsIndex, filteredOptionsRef, isMouseLastUsedInputDevice, setIsMouseLastUsedInputDevice, isValueNew, setFilteredOptionsIndex, toggleIsListOpen, } = useFilteredOptionsContext();
    const { isMultiSelect, selectedOptions, toggleOption } = useSelectedOptionsContext();
    return (React.createElement("ul", { ref: filteredOptionsRef, className: cl("navds-combobox__list", {
            "navds-combobox__list--closed": !isListOpen,
            "navds-combobox__list--with-hover": isMouseLastUsedInputDevice,
        }), id: `${id}-filtered-options`, role: "listbox", tabIndex: -1 },
        isLoading && (React.createElement("li", { className: "navds-combobox__list-item--loading", role: "option", "aria-selected": false, id: `${id}-is-loading` },
            React.createElement(Loader, { "aria-label": "S\u00F8ker..." }))),
        isValueNew && allowNewValues && (React.createElement("li", { tabIndex: -1, onMouseMove: () => {
                if (filteredOptionsIndex !== -1) {
                    setFilteredOptionsIndex(-1);
                    setIsMouseLastUsedInputDevice(true);
                }
            }, onPointerUp: (event) => {
                toggleOption(value, event);
                if (!isMultiSelect && !selectedOptions.includes(value))
                    toggleIsListOpen(false);
            }, id: `${id}-combobox-new-option`, className: cl("navds-combobox__list-item__new-option", {
                "navds-combobox__list-item__new-option--focus": filteredOptionsIndex === -1,
            }), role: "option", "aria-selected": false },
            React.createElement(PlusIcon, { "aria-hidden": true }),
            React.createElement(BodyShort, { size: size },
                "Legg til",
                " ",
                React.createElement(Label, { as: "span", size: size },
                    "\u201C",
                    value,
                    "\u201D")))),
        !isLoading && filteredOptions.length === 0 && (React.createElement("li", { className: "navds-combobox__list-item__no-options", role: "option", "aria-selected": false, id: `${id}-no-hits` }, "Ingen s\u00F8ketreff")),
        filteredOptions.map((option, index) => (React.createElement("li", { className: cl("navds-combobox__list-item", {
                "navds-combobox__list-item--focus": index === filteredOptionsIndex,
                "navds-combobox__list-item--selected": selectedOptions.includes(option),
            }), id: `${id}-option-${option.replace(" ", "-")}`, key: option, tabIndex: -1, onMouseMove: () => {
                if (filteredOptionsIndex !== index) {
                    setFilteredOptionsIndex(index);
                    setIsMouseLastUsedInputDevice(true);
                }
            }, onPointerUp: (event) => {
                toggleOption(option, event);
                if (!isMultiSelect && !selectedOptions.includes(option))
                    toggleIsListOpen(false);
            }, role: "option", "aria-selected": selectedOptions.includes(option) },
            React.createElement(BodyShort, { size: size }, option),
            selectedOptions.includes(option) && React.createElement(CheckmarkIcon, null))))));
};
export default FilteredOptions;
//# sourceMappingURL=FilteredOptions.js.map
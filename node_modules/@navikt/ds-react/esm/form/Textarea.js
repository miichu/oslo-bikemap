var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, useState } from "react";
import { BodyShort, ErrorMessage, Label, omit, useId } from "..";
import TextareaAutosize from "../util/TextareaAutoSize";
import { useFormField } from "./useFormField";
import { ReadOnlyIcon } from "./ReadOnlyIcon";
/**
 * A component that displays a textarea input field with a label.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/textarea)
 * @see 🏷️ {@link TextareaProps}
 *
 * @example
 * ```jsx
 * <Textarea label="Har du noen tilbakemeldinger?" />
 * ```
 */
export const Textarea = forwardRef((props, ref) => {
    var _a, _b, _c;
    const { inputProps, errorId, showErrorMsg, hasError, size, inputDescriptionId, } = useFormField(props, "textarea");
    const { label, className, description, maxLength, hideLabel = false, resize, i18n, readOnly } = props, rest = __rest(props, ["label", "className", "description", "maxLength", "hideLabel", "resize", "i18n", "readOnly"]);
    const maxLengthId = useId();
    const hasMaxLength = maxLength !== undefined && maxLength > 0;
    const [controlledValue, setControlledValue] = useState((_a = props === null || props === void 0 ? void 0 : props.defaultValue) !== null && _a !== void 0 ? _a : "");
    const getMinRows = () => {
        let rows = (rest === null || rest === void 0 ? void 0 : rest.minRows) ? rest === null || rest === void 0 ? void 0 : rest.minRows : 3;
        if (size === "small") {
            rows = (rest === null || rest === void 0 ? void 0 : rest.minRows) ? rest === null || rest === void 0 ? void 0 : rest.minRows : 2;
        }
        return rows;
    };
    const describedBy = cl(inputProps["aria-describedby"], {
        [maxLengthId !== null && maxLengthId !== void 0 ? maxLengthId : ""]: hasMaxLength,
    });
    return (React.createElement("div", { className: cl(className, "navds-form-field", `navds-form-field--${size}`, {
            "navds-form-field--disabled": !!inputProps.disabled,
            "navds-form-field--readonly": readOnly,
            "navds-textarea--readonly": readOnly,
            "navds-textarea--error": hasError,
            "navds-textarea--resize": resize,
        }) },
        React.createElement(Label, { htmlFor: inputProps.id, size: size, className: cl("navds-form-field__label", {
                "navds-sr-only": hideLabel,
            }) },
            React.createElement(ReadOnlyIcon, { readOnly: readOnly }),
            label),
        !!description && (React.createElement(BodyShort, { className: cl("navds-form-field__description", {
                "navds-sr-only": hideLabel,
            }), id: inputDescriptionId, size: size, as: "div" }, description)),
        React.createElement("div", { className: "navds-textarea__wrapper" },
            React.createElement(TextareaAutosize, Object.assign({}, omit(rest, ["error", "errorId", "size"]), inputProps, { onChange: (e) => props.onChange
                    ? props.onChange(e)
                    : setControlledValue(e.target.value), minRows: getMinRows(), ref: ref, readOnly: readOnly, className: cl("navds-textarea__input", "navds-body-short", `navds-body-${size !== null && size !== void 0 ? size : "medium"}`, {
                    "navds-textarea--counter": hasMaxLength,
                }) }, (describedBy ? { "aria-describedby": describedBy } : {}))),
            hasMaxLength && (React.createElement(React.Fragment, null,
                React.createElement("span", { id: maxLengthId, className: "navds-sr-only" }, `Tekstområde med plass til ${maxLength} tegn.`),
                React.createElement(Counter, { maxLength: maxLength, currentLength: (_c = (_b = props.value) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : controlledValue === null || controlledValue === void 0 ? void 0 : controlledValue.length, size: size, i18n: i18n })))),
        React.createElement("div", { className: "navds-form-field__error", id: errorId, "aria-relevant": "additions removals", "aria-live": "polite" }, showErrorMsg && (React.createElement(ErrorMessage, { size: size }, props.error)))));
});
export const Counter = ({ maxLength, currentLength, size, i18n }) => {
    var _a, _b;
    const difference = maxLength - currentLength;
    return (React.createElement(BodyShort, { className: cl("navds-textarea__counter", {
            "navds-textarea__counter--error": difference < 0,
        }), "aria-live": difference < 20 ? "polite" : "off", size: size }, difference < 0
        ? `${Math.abs(difference)} ${(_a = i18n === null || i18n === void 0 ? void 0 : i18n.counterTooMuch) !== null && _a !== void 0 ? _a : "tegn for mye"}`
        : `${difference} ${(_b = i18n === null || i18n === void 0 ? void 0 : i18n.counterLeft) !== null && _b !== void 0 ? _b : "tegn igjen"}`));
};
export default Textarea;
//# sourceMappingURL=Textarea.js.map
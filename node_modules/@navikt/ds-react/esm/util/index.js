import { useEffect, useLayoutEffect } from "react";
export * from "./OverridableComponent";
export * from "./useId";
export { default as mergeRefs } from "./mergeRefs";
export { default as debounce } from "./debounce";
const canUseDOM = () => {
    return (typeof window !== "undefined" &&
        typeof window.document !== "undefined" &&
        typeof window.document.createElement !== "undefined");
};
export const useClientLayoutEffect = canUseDOM() ? useLayoutEffect : () => { };
export const omit = (obj, props) => Object.entries(obj)
    .filter(([key]) => !props.includes(key))
    .reduce((obj, [key, value]) => (Object.assign(Object.assign({}, obj), { [key]: value })), {});
/* https://github.com/streamich/react-use/blob/master/src/useEvent.ts */
export const useEventListener = (name, handler, target = typeof window !== "undefined" ? window : null) => {
    useEffect(() => {
        if (!target) {
            return;
        }
        target === null || target === void 0 ? void 0 : target.addEventListener(name, handler);
        return () => {
            target === null || target === void 0 ? void 0 : target.removeEventListener(name, handler);
        };
    }, [name, handler, target]);
};
/* https://github.com/radix-ui/primitives/blob/main/packages/core/primitive/src/primitive.tsx */
export const composeEventHandlers = (originalEventHandler, ourEventHandler) => {
    return function handleEvent(event) {
        originalEventHandler === null || originalEventHandler === void 0 ? void 0 : originalEventHandler(event);
        if (!event.defaultPrevented) {
            return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
        }
    };
};
//# sourceMappingURL=index.js.map
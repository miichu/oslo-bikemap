import { useLayoutEffect } from "react";
export * from "./OverridableComponent";
export * from "./useId";
export { default as mergeRefs } from "./mergeRefs";
export { default as debounce } from "./debounce";
export declare const useClientLayoutEffect: typeof useLayoutEffect;
export declare const omit: (obj: object, props: string[]) => {};
export interface ListenerT {
    addEventListener(name: string, handler: (event?: any) => void, ...args: any[]): any;
    removeEventListener(name: string, handler: (event?: any) => void, ...args: any[]): any;
}
export declare const useEventListener: <T extends ListenerT>(name: Parameters<ListenerT["addEventListener"]>[0], handler: Parameters<ListenerT["addEventListener"]>[1], target?: T | Window | null) => void;
export declare const composeEventHandlers: <E>(originalEventHandler?: ((event: E) => void) | undefined, ourEventHandler?: ((event: E) => void) | undefined) => (event: E) => void;

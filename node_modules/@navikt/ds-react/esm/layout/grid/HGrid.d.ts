import React, { HTMLAttributes } from "react";
import { ResponsiveProp, SpacingScale } from "../utilities/css";
export interface HGridProps extends HTMLAttributes<HTMLDivElement> {
    children: React.ReactNode;
    /**
     * Number of columns to display. Can be a number, a string with a unit or tokens for spesific breakpoints.
     * Sets `grid-template-columns`, so `fr`, `minmax` etc. works.
     * @example
     * columns={{ sm: 1, md: 1, lg: "1fr auto", xl: "1fr auto"}}
     * @example
     * columns={3}
     * @example
     * columns="repeat(3, minmax(0, 1fr))"
     */
    columns?: ResponsiveProp<number | string>;
    /** Spacing between columns. Based on spacing-tokens.
     * @example
     * gap="6"
     * gap={{ sm: "2", md: "2", lg: "6", xl: "6"}}
     */
    gap?: ResponsiveProp<SpacingScale>;
    /**
     * Vertical alignment of children. Elements will by default stretch to the height of parent-element.
     */
    align?: "start" | "center" | "end";
}
/**
 * Horizontal Grid Primitive with dynamic columns and gap based on breakpoints.
 *
 * @see [üìù Documentation](https://aksel.nav.no/komponenter/primitives/hgrid)
 * @see üè∑Ô∏è {@link HGridProps}
 *
 * @example
 * <HGrid gap="6" columns={3}>
 *   <div />
 *   <div />
 *   <div />
 * </HGrid>
 * @example
 * <HGrid gap={{xs: "2", md: "6"}} columns={3}>
 *   <div />
 *   <div />
 *   <div />
 * </HGrid>
 * @example
 * <HGrid gap="6" columns={{ sm: 1, md: 1, lg: "1fr auto", xl: "1fr auto"}}>
 *   <div />
 *   <div />
 *   <div />
 * </HGrid>
 */
export declare const HGrid: React.ForwardRefExoticComponent<HGridProps & React.RefAttributes<HTMLDivElement>>;
export default HGrid;

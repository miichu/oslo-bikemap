import React from "react";
import { HeaderType } from "./Header";
import { BodyType } from "./Body";
import { RowType } from "./Row";
import { ColumnHeaderType } from "./ColumnHeader";
import { HeaderCellType } from "./HeaderCell";
import { DataCellType } from "./DataCell";
import { ExpandableRowType } from "./ExpandableRow";
export interface SortState {
    orderBy: string;
    direction: "ascending" | "descending";
}
export interface TableProps extends React.TableHTMLAttributes<HTMLTableElement> {
    /**
     * Changes padding around Cells
     * @default "medium"
     */
    size?: "large" | "medium" | "small";
    /**
     * Zebra striped table
     * @default false
     */
    zebraStripes?: boolean;
    /**
     * Sort state
     */
    sort?: SortState;
    /**
     * Callback whens sort state changes
     */
    onSortChange?: (sortKey?: string) => void;
}
export interface TableType extends React.ForwardRefExoticComponent<TableProps & React.RefAttributes<HTMLTableElement>> {
    Header: HeaderType;
    Body: BodyType;
    Row: RowType;
    DataCell: DataCellType;
    HeaderCell: HeaderCellType;
    ColumnHeader: ColumnHeaderType;
    ExpandableRow: ExpandableRowType;
}
export interface TableContextProps {
    onSortChange?: (sortKey: string) => void;
    sort?: SortState;
}
export declare const TableContext: React.Context<TableContextProps | null>;
/**
 * A component that displays a table with headers and rows.
 *
 * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/table)
 * @see üè∑Ô∏è {@link TableProps}
 *
 * @example
 * ```jsx
 * <Table>
 *   <Table.Header>
 *     <Table.Row>
 *       <Table.HeaderCell scope="col">Navn</Table.HeaderCell>
 *       <Table.HeaderCell scope="col">F√∏dseslnr.</Table.HeaderCell>
 *       <Table.HeaderCell scope="col">Start</Table.HeaderCell>
 *     </Table.Row>
 *   </Table.Header>
 *   <Table.Body>
 *     {data.map(({ name, fnr, start }, i) => {
 *       return (
 *         <Table.Row key={i + fnr}>
 *           <Table.HeaderCell scope="row">{name}</Table.HeaderCell>
 *           <Table.DataCell>{fnr}</Table.DataCell>
 *           <Table.DataCell>
 *             {format(new Date(start), "dd.MM.yyyy")}
 *           </Table.DataCell>
 *         </Table.Row>
 *       );
 *     })}
 *   </Table.Body>
 * </Table>
 * ```
 */
export declare const Table: TableType;
export default Table;

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, useState } from "react";
import { useId } from "..";
import AnimateHeight from "../util/AnimateHeight";
import DataCell from "./DataCell";
import Row from "./Row";
import { ChevronDownIcon } from "@navikt/aksel-icons";
export const ExpandableRow = forwardRef((_a, ref) => {
    var { className, children, content, togglePlacement = "left", defaultOpen = false, open, onOpenChange, expansionDisabled = false, expandOnRowClick = false, colSpan = 999 } = _a, rest = __rest(_a, ["className", "children", "content", "togglePlacement", "defaultOpen", "open", "onOpenChange", "expansionDisabled", "expandOnRowClick", "colSpan"]);
    const [internalOpen, setInternalOpen] = useState(defaultOpen);
    const id = useId();
    const isOpen = open !== null && open !== void 0 ? open : internalOpen;
    const expansionHandler = (e) => {
        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(!isOpen);
        if (open === undefined) {
            setInternalOpen((open) => !open);
        }
        e.stopPropagation();
    };
    const onRowClick = (e) => {
        if (e.target.nodeName === "TD" || e.target.nodeName === "TH") {
            expansionHandler(e);
        }
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Row, Object.assign({}, rest, { ref: ref, className: cl("navds-table__expandable-row", className, {
                "navds-table__expandable-row--open": isOpen,
                "navds-table__expandable-row--expansion-disabled": expansionDisabled,
                "navds-table__expandable-row--clickable": expandOnRowClick,
            }), onClick: (e) => {
                var _a;
                !expansionDisabled && expandOnRowClick && onRowClick(e);
                (_a = rest === null || rest === void 0 ? void 0 : rest.onClick) === null || _a === void 0 ? void 0 : _a.call(rest, e);
            } }),
            togglePlacement === "right" && children,
            React.createElement(DataCell, { className: cl("navds-table__toggle-expand-cell", {
                    "navds-table__toggle-expand-cell--open": isOpen,
                }) }, !expansionDisabled && (React.createElement("button", { className: "navds-table__toggle-expand-button", type: "button", "aria-controls": id, "aria-expanded": isOpen, onClick: expansionHandler },
                React.createElement(ChevronDownIcon, { className: "navds-table__expandable-icon", title: isOpen ? "Vis mindre" : "Vis mer" })))),
            togglePlacement === "left" && children),
        React.createElement("tr", { className: "navds-table__expanded-row", "aria-hidden": !isOpen, id: id },
            React.createElement("td", { colSpan: colSpan, className: "navds-table__expanded-row-cell" },
                React.createElement(AnimateHeight, { className: "navds-table__expanded-row-collapse", innerClassName: "navds-table__expanded-row-content", height: isOpen ? "auto" : 0, duration: 250 }, content)))));
});
export default ExpandableRow;
//# sourceMappingURL=ExpandableRow.js.map
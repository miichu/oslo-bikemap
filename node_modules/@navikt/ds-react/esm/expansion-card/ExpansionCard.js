var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { createContext, forwardRef, useRef, useState } from "react";
import ExpansionCardContent from "./ExpansionCardContent";
import { ExpansionCardDescription, } from "./ExpansionCardDescription";
import ExpansionCardHeader from "./ExpansionCardHeader";
import { ExpansionCardTitle, } from "./ExpansionCardTitle";
export const ExpansionCardContext = createContext({
    open: false,
    toggleOpen: () => { },
    size: "medium",
});
/**
 * A component that displays an expandable card.
 *
 * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/expansioncard)
 * @see üè∑Ô∏è {@link ExpansionCardProps}
 *
 * @example
 * ```jsx
 * <ExpansionCard aria-label="default-demo">
 *   <ExpansionCard.Header>
 *     <ExpansionCard.Title>Utbetaling av sykepenger</ExpansionCard.Title>
 *   </ExpansionCard.Header>
 *   <ExpansionCard.Content>
 *     <Innhold />
 *   </ExpansionCard.Content>
 * </ExpansionCard>
 * ```
 */
export const ExpansionCard = forwardRef((_a, ref) => {
    var { className, onToggle, open, defaultOpen = false, size = "medium" } = _a, rest = __rest(_a, ["className", "onToggle", "open", "defaultOpen", "size"]);
    const [_open, _setOpen] = useState(defaultOpen);
    const shouldFade = useRef(!(Boolean(open) || defaultOpen));
    const handleOpen = () => {
        if (open === undefined) {
            const newOpen = !_open;
            _setOpen(newOpen);
            onToggle === null || onToggle === void 0 ? void 0 : onToggle(newOpen);
        }
        else {
            onToggle === null || onToggle === void 0 ? void 0 : onToggle(!open);
        }
        shouldFade.current = true;
    };
    return (React.createElement(ExpansionCardContext.Provider, { value: { open: open !== null && open !== void 0 ? open : _open, toggleOpen: handleOpen, size } },
        React.createElement("section", Object.assign({}, rest, { className: cl("navds-expansioncard", className, `navds-expansioncard--${size}`, {
                "navds-expansioncard--open": open !== null && open !== void 0 ? open : _open,
                "navds-expansioncard--no-animation": !shouldFade.current,
            }), ref: ref }))));
});
ExpansionCard.Header = ExpansionCardHeader;
ExpansionCard.Content = ExpansionCardContent;
ExpansionCard.Title = ExpansionCardTitle;
ExpansionCard.Description = ExpansionCardDescription;
export default ExpansionCard;
//# sourceMappingURL=ExpansionCard.js.map
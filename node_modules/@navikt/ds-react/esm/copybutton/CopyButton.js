var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CheckmarkIcon, FilesIcon } from "@navikt/aksel-icons";
import cl from "clsx";
import React, { forwardRef, useEffect, useRef, useState, } from "react";
import copy from "../util/copy";
import Label from "../typography/Label";
/**
 * A button component that copies text to the clipboard when clicked.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/copybutton)
 * @see 🏷️ {@link CopyButtonProps}
 *
 * @example
 * ```jsx
      <CopyButton copyText="3.14" />
 * ```
 */
export const CopyButton = forwardRef((_a, ref) => {
    var { className, copyText, text, activeText = "Kopiert!", variant = "neutral", size = "medium", onActiveChange, icon, activeIcon, activeDuration = 2000, title = "Kopier", activeTitle = "Kopiert", iconPosition = "left" } = _a, rest = __rest(_a, ["className", "copyText", "text", "activeText", "variant", "size", "onActiveChange", "icon", "activeIcon", "activeDuration", "title", "activeTitle", "iconPosition"]);
    const [active, setActive] = useState(false);
    const timeoutRef = useRef();
    useEffect(() => {
        return () => {
            timeoutRef.current && clearTimeout(timeoutRef.current);
        };
    }, []);
    const handleClick = (event) => {
        var _a;
        timeoutRef.current && clearTimeout(timeoutRef.current);
        copy(copyText);
        setActive(true);
        onActiveChange === null || onActiveChange === void 0 ? void 0 : onActiveChange(true);
        (_a = rest.onClick) === null || _a === void 0 ? void 0 : _a.call(rest, event);
        timeoutRef.current = window.setTimeout(() => {
            setActive(false);
            onActiveChange === null || onActiveChange === void 0 ? void 0 : onActiveChange(false);
        }, activeDuration);
    };
    const CopyIcon = () => {
        return active ? (React.createElement("span", { className: "navds-copybutton__icon" }, activeIcon !== null && activeIcon !== void 0 ? activeIcon : (React.createElement(CheckmarkIcon, { "aria-hidden": !!text, title: text ? undefined : activeTitle })))) : (React.createElement("span", { className: "navds-copybutton__icon" }, icon !== null && icon !== void 0 ? icon : (React.createElement(FilesIcon, { "aria-hidden": !!text, title: text ? undefined : title }))));
    };
    return (React.createElement("button", Object.assign({ ref: ref, type: "button" }, rest, { "aria-live": "polite", className: cl("navds-copybutton", className, `navds-copybutton--${size}`, `navds-copybutton--${variant}`, {
            "navds-copybutton--icon-only": !text,
            "navds-copybutton--active": active,
        }), onClick: handleClick }),
        React.createElement("span", { className: "navds-copybutton__content" },
            iconPosition === "left" && React.createElement(CopyIcon, null),
            text &&
                (active ? (React.createElement(Label, { as: "span", size: size === "medium" ? "medium" : "small", "aria-live": "polite" }, activeText)) : (React.createElement(Label, { as: "span", size: size === "medium" ? "medium" : "small", "aria-live": "polite" }, text))),
            iconPosition === "right" && React.createElement(CopyIcon, null))));
});
export default CopyButton;
//# sourceMappingURL=CopyButton.js.map
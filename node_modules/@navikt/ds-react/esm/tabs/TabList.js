var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ChevronLeftIcon, ChevronRightIcon } from "@navikt/aksel-icons";
import { TabsList } from "@radix-ui/react-tabs";
import cl from "clsx";
import React, { forwardRef, useContext, useEffect, useMemo, useRef, useState, } from "react";
import { debounce, mergeRefs } from "..";
import { TabsContext } from "./Tabs";
export const TabList = forwardRef((_a, ref) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    const context = useContext(TabsContext);
    const listRef = useRef(null);
    const mergedRef = useMemo(() => mergeRefs([listRef, ref]), [ref]);
    const [displayScroll, setDisplayScroll] = useState({
        start: false,
        end: false,
    });
    const updateScrollButtonState = useMemo(() => debounce(() => {
        if (!(listRef === null || listRef === void 0 ? void 0 : listRef.current))
            return;
        const { scrollWidth, clientWidth } = listRef.current;
        const scrollLeft = listRef.current.scrollLeft;
        // use 1 for the potential rounding error with browser zooms.
        const showStartScroll = scrollLeft > 1;
        const showEndScroll = scrollLeft < scrollWidth - clientWidth - 1;
        setDisplayScroll((displayScroll) => showStartScroll === displayScroll.start &&
            showEndScroll === displayScroll.end
            ? displayScroll
            : { start: showStartScroll, end: showEndScroll });
    }), []);
    useEffect(() => {
        var _a, _b, _c;
        const handleResize = () => updateScrollButtonState();
        const win = (_c = (_b = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument) !== null && _b !== void 0 ? _b : document) !== null && _c !== void 0 ? _c : window;
        win.addEventListener("resize", handleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== "undefined") {
            resizeObserver = new ResizeObserver(handleResize);
            resizeObserver.observe(listRef.current);
        }
        return () => {
            win.removeEventListener("resize", handleResize);
            if (resizeObserver) {
                resizeObserver.disconnect();
            }
        };
    }, [updateScrollButtonState]);
    useEffect(() => {
        updateScrollButtonState();
    });
    useEffect(() => {
        return () => {
            updateScrollButtonState.clear();
        };
    }, [updateScrollButtonState]);
    const ScrollButton = ({ dir, hidden, }) => (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    React.createElement("div", { className: cl("navds-tabs__scroll-button", {
            "navds-tabs__scroll-button--hidden": hidden,
        }), onClick: () => {
            if (!listRef.current)
                return;
            listRef.current.scrollLeft += dir * 100;
        } }, dir === -1 ? (React.createElement(ChevronLeftIcon, { title: "scroll tilbake" })) : (React.createElement(ChevronRightIcon, { title: "scroll neste" }))));
    const showSteppers = displayScroll.end || displayScroll.start;
    return (React.createElement("div", { className: "navds-tabs__tablist-wrapper" },
        showSteppers && (React.createElement(ScrollButton, { dir: -1, hidden: !displayScroll.start })),
        React.createElement(TabsList, Object.assign({}, rest, { ref: mergedRef, onScroll: updateScrollButtonState, loop: context === null || context === void 0 ? void 0 : context.loop, className: cl("navds-tabs__tablist", className) })),
        showSteppers && React.createElement(ScrollButton, { dir: 1, hidden: !displayScroll.end })));
});
export default TabList;
//# sourceMappingURL=TabList.js.map
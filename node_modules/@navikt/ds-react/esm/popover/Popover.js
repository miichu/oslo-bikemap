var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { autoUpdate, arrow as flArrow, offset as flOffset, flip, shift, useClick, useDismiss, useFloating, useInteractions, } from "@floating-ui/react";
import cl from "clsx";
import React, { forwardRef, useCallback, useMemo, useRef, useContext, } from "react";
import { mergeRefs } from "..";
import { useClientLayoutEffect, useEventListener } from "../util";
import PopoverContent from "./PopoverContent";
import { ModalContext } from "../modal/ModalContext";
/**
 * A component that displays a popover.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/popover)
 * @see 🏷️ {@link PopoverProps}
 *
 * @example
 * ```jsx
 * <Button ref={buttonRef} onClick={() => setOpenState(true)}>
 *   Åpne popover
 * </Button>
 * <Popover
 *   open={openState}
 *   onClose={() => setOpenState(false)}
 *   anchorEl={buttonRef.current}
 * >
 *   <Popover.Content>Innhold her!</Popover.Content>
 * </Popover>
 * ```
 */
export const Popover = forwardRef((_a, ref) => {
    var { className, children, anchorEl, arrow = true, open, onClose, placement = "top", offset, strategy: userStrategy, bubbleEscape = false } = _a, rest = __rest(_a, ["className", "children", "anchorEl", "arrow", "open", "onClose", "placement", "offset", "strategy", "bubbleEscape"]);
    const arrowRef = useRef(null);
    const isInModal = useContext(ModalContext) !== null;
    const chosenStrategy = userStrategy !== null && userStrategy !== void 0 ? userStrategy : (isInModal ? "fixed" : "absolute");
    const { x, y, strategy, context, update, refs, placement: flPlacement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, } = useFloating({
        strategy: chosenStrategy,
        placement,
        open,
        onOpenChange: () => onClose(),
        middleware: [
            flOffset(offset !== null && offset !== void 0 ? offset : (arrow ? 16 : 4)),
            flip({ padding: 5, fallbackPlacements: ["bottom", "top"] }),
            shift({ padding: 12 }),
            flArrow({ element: arrowRef, padding: 8 }),
        ],
    });
    const { getFloatingProps } = useInteractions([
        useClick(context),
        useDismiss(context, {
            bubbles: {
                escapeKey: bubbleEscape,
            },
        }),
    ]);
    useClientLayoutEffect(() => {
        refs.setReference(anchorEl);
    }, [anchorEl]);
    const floatingRef = useMemo(() => mergeRefs([refs.setFloating, ref]), [refs.setFloating, ref]);
    useClientLayoutEffect(() => {
        if (!refs.reference.current || !refs.floating.current || !open)
            return;
        const cleanup = autoUpdate(refs.reference.current, refs.floating.current, update);
        return () => cleanup();
    }, [refs.floating, refs.reference, update, open, anchorEl]);
    useEventListener("focusin", useCallback((e) => {
        var _a;
        if (e.target instanceof HTMLElement &&
            ![anchorEl, (_a = refs === null || refs === void 0 ? void 0 : refs.floating) === null || _a === void 0 ? void 0 : _a.current].some((element) => element === null || element === void 0 ? void 0 : element.contains(e.target))) {
            open && onClose();
        }
    }, [anchorEl, refs, open, onClose]));
    const staticSide = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right",
    }[flPlacement.split("-")[0]];
    return (React.createElement("div", Object.assign({ className: cl("navds-popover", className, {
            "navds-popover--hidden": !open || !anchorEl,
        }), "data-placement": flPlacement, "aria-hidden": !open || !anchorEl }, getFloatingProps({
        ref: floatingRef,
        style: {
            position: strategy,
            top: y !== null && y !== void 0 ? y : 0,
            left: x !== null && x !== void 0 ? x : 0,
        },
        tabIndex: undefined,
    }), rest),
        children,
        arrow && (React.createElement("div", { ref: (node) => {
                arrowRef.current = node;
            }, style: Object.assign(Object.assign(Object.assign({}, (arrowX != null ? { left: arrowX } : {})), (arrowY != null ? { top: arrowY } : {})), (staticSide ? { [staticSide]: "-0.5rem" } : {})), className: "navds-popover__arrow" }))));
});
Popover.Content = PopoverContent;
export default Popover;
//# sourceMappingURL=Popover.js.map
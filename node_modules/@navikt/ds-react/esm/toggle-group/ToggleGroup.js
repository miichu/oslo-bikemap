var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as RadixToggleGroup from "@radix-ui/react-toggle-group";
import cl from "clsx";
import React, { createContext, forwardRef, useState, } from "react";
import { Label, useId } from "..";
import ToggleItem from "./ToggleItem";
export const ToggleGroupContext = createContext(null);
/**
 * A component that displays a group of toggle buttons.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/toggle-group)
 * @see 🏷️ {@link ToggleGroupProps}
 *
 * @example
 * ```jsx
 * <ToggleGroup defaultValue="lest" onChange={console.log} size="small">
 *   <ToggleGroup.Item value="ulest">Ulest</ToggleGroup.Item>
 *   <ToggleGroup.Item value="lest">Leste</ToggleGroup.Item>
 *   <ToggleGroup.Item value="sendt">Sendt</ToggleGroup.Item>
 * </ToggleGroup>
 * ```
 */
export const ToggleGroup = forwardRef((_a, ref) => {
    var { className, children, onChange, size = "medium", label, value, defaultValue, "aria-describedby": desc, variant = "action" } = _a, rest = __rest(_a, ["className", "children", "onChange", "size", "label", "value", "defaultValue", "aria-describedby", "variant"]);
    const [groupValue, setGroupValue] = useState(defaultValue);
    const labelId = useId();
    const handleValueChange = (v) => {
        if (v !== "") {
            setGroupValue(v);
            onChange === null || onChange === void 0 ? void 0 : onChange(v);
        }
    };
    if (!value && !defaultValue) {
        console.error("ToggleGroup without value/defaultvalue is not allowed");
    }
    const describeBy = cl({
        [desc !== null && desc !== void 0 ? desc : ""]: !!desc,
        [labelId !== null && labelId !== void 0 ? labelId : ""]: !!label,
    });
    if (!value && !defaultValue) {
        console.error("ToggleGroup needs either a value or defaultValue");
    }
    return (React.createElement(ToggleGroupContext.Provider, { value: {
            size,
        } },
        React.createElement("div", { className: cl("navds-toggle-group__wrapper", className) },
            label && (React.createElement(Label, { size: size, className: "navds-toggle-group__label", id: labelId }, label)),
            React.createElement(RadixToggleGroup.Root, Object.assign({}, rest, { onValueChange: handleValueChange, value: value !== null && value !== void 0 ? value : groupValue, defaultValue: defaultValue, ref: ref, className: cl("navds-toggle-group", `navds-toggle-group--${size}`, `navds-toggle-group--${variant}`) }, (describeBy && { "aria-describedby": describeBy }), { role: "radiogroup", type: "single" }), children))));
});
ToggleGroup.Item = ToggleItem;
export default ToggleGroup;
//# sourceMappingURL=ToggleGroup.js.map
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useState } from "react";
import cl from "clsx";
import { BodyLong } from "../typography";
import { ChevronDownIcon } from "@navikt/aksel-icons";
/**
 * ReadMore
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/read-more)
 * @see 🏷️ {@link ReadMoreProps}
 *
 * @example
 * // Default
 * <ReadMore header="Dette regnes som helsemessige begrensninger">
 *  Med helsemessige begrensninger mener vi funksjonshemming, sykdom...
 * </ReadMore>
 *
 * @example
 * // Litt mindre versjon
 * <ReadMore size="small" header="Dette regnes som helsemessige begrensninger">
 *   Med helsemessige begrensninger mener vi funksjonshemming, sykdom...
 * </ReadMore>
 */
export const ReadMore = forwardRef((_a, ref) => {
    var { className, header, children, open, defaultOpen = false, onClick, size = "medium" } = _a, rest = __rest(_a, ["className", "header", "children", "open", "defaultOpen", "onClick", "size"]);
    const [internalOpen, setInternalOpen] = useState(defaultOpen);
    const isOpened = open !== null && open !== void 0 ? open : internalOpen;
    return (React.createElement("div", { className: cl("navds-read-more", `navds-read-more--${size}`, className, { "navds-read-more--open": isOpened }) },
        React.createElement("button", Object.assign({}, rest, { ref: ref, type: "button", className: cl("navds-read-more__button", "navds-body-short", {
                "navds-body-short--small": size === "small",
            }), onClick: (e) => {
                if (open === undefined) {
                    setInternalOpen((isOpen) => !isOpen);
                }
                onClick === null || onClick === void 0 ? void 0 : onClick(e);
            }, "aria-expanded": isOpened }),
            React.createElement(ChevronDownIcon, { className: "navds-read-more__expand-icon", "aria-hidden": true }),
            React.createElement("span", null, header)),
        React.createElement(BodyLong, { as: "div", "aria-hidden": !isOpened, className: cl("navds-read-more__content", {
                "navds-read-more__content--closed": !isOpened,
            }), size: size }, children)));
});
export default ReadMore;
//# sourceMappingURL=ReadMore.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const clsx_1 = __importDefault(require("clsx"));
const __1 = require("../../..");
const aksel_icons_1 = require("@navikt/aksel-icons");
const filteredOptionsContext_1 = require("./filteredOptionsContext");
const selectedOptionsContext_1 = require("../SelectedOptions/selectedOptionsContext");
const inputContext_1 = require("../Input/inputContext");
const FilteredOptions = () => {
    const { inputProps: { id }, size, value, } = (0, inputContext_1.useInputContext)();
    const { allowNewValues, isLoading, isListOpen, filteredOptions, filteredOptionsIndex, filteredOptionsRef, isMouseLastUsedInputDevice, setIsMouseLastUsedInputDevice, isValueNew, setFilteredOptionsIndex, toggleIsListOpen, } = (0, filteredOptionsContext_1.useFilteredOptionsContext)();
    const { isMultiSelect, selectedOptions, toggleOption } = (0, selectedOptionsContext_1.useSelectedOptionsContext)();
    return (react_1.default.createElement("ul", { ref: filteredOptionsRef, className: (0, clsx_1.default)("navds-combobox__list", {
            "navds-combobox__list--closed": !isListOpen,
            "navds-combobox__list--with-hover": isMouseLastUsedInputDevice,
        }), id: `${id}-filtered-options`, role: "listbox", tabIndex: -1 },
        isLoading && (react_1.default.createElement("li", { className: "navds-combobox__list-item--loading", role: "option", "aria-selected": false, id: `${id}-is-loading` },
            react_1.default.createElement(__1.Loader, { "aria-label": "S\u00F8ker..." }))),
        isValueNew && allowNewValues && (react_1.default.createElement("li", { tabIndex: -1, onMouseMove: () => {
                if (filteredOptionsIndex !== -1) {
                    setFilteredOptionsIndex(-1);
                    setIsMouseLastUsedInputDevice(true);
                }
            }, onPointerUp: (event) => {
                toggleOption(value, event);
                if (!isMultiSelect && !selectedOptions.includes(value))
                    toggleIsListOpen(false);
            }, id: `${id}-combobox-new-option`, className: (0, clsx_1.default)("navds-combobox__list-item__new-option", {
                "navds-combobox__list-item__new-option--focus": filteredOptionsIndex === -1,
            }), role: "option", "aria-selected": false },
            react_1.default.createElement(aksel_icons_1.PlusIcon, { "aria-hidden": true }),
            react_1.default.createElement(__1.BodyShort, { size: size },
                "Legg til",
                " ",
                react_1.default.createElement(__1.Label, { as: "span", size: size },
                    "\u201C",
                    value,
                    "\u201D")))),
        !isLoading && filteredOptions.length === 0 && (react_1.default.createElement("li", { className: "navds-combobox__list-item__no-options", role: "option", "aria-selected": false, id: `${id}-no-hits` }, "Ingen s\u00F8ketreff")),
        filteredOptions.map((option, index) => (react_1.default.createElement("li", { className: (0, clsx_1.default)("navds-combobox__list-item", {
                "navds-combobox__list-item--focus": index === filteredOptionsIndex,
                "navds-combobox__list-item--selected": selectedOptions.includes(option),
            }), id: `${id}-option-${option.replace(" ", "-")}`, key: option, tabIndex: -1, onMouseMove: () => {
                if (filteredOptionsIndex !== index) {
                    setFilteredOptionsIndex(index);
                    setIsMouseLastUsedInputDevice(true);
                }
            }, onPointerUp: (event) => {
                toggleOption(option, event);
                if (!isMultiSelect && !selectedOptions.includes(option))
                    toggleIsListOpen(false);
            }, role: "option", "aria-selected": selectedOptions.includes(option) },
            react_1.default.createElement(__1.BodyShort, { size: size }, option),
            selectedOptions.includes(option) && react_1.default.createElement(aksel_icons_1.CheckmarkIcon, null))))));
};
exports.default = FilteredOptions;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFilteredOptionsContext = exports.FilteredOptionsProvider = void 0;
const react_1 = __importStar(require("react"));
const clsx_1 = __importDefault(require("clsx"));
const customOptionsContext_1 = require("../customOptionsContext");
const inputContext_1 = require("../Input/inputContext");
const usePrevious_1 = __importDefault(require("../../../util/usePrevious"));
const util_1 = require("../../../util");
const normalizeText = (text) => typeof text === "string" ? `${text}`.toLowerCase().trim() : "";
const isPartOfText = (value, text) => normalizeText(text).startsWith(normalizeText(value !== null && value !== void 0 ? value : ""));
const isValueInList = (value, list) => list === null || list === void 0 ? void 0 : list.find((listItem) => normalizeText(value) === normalizeText(listItem));
const getMatchingValuesFromList = (value, list) => list === null || list === void 0 ? void 0 : list.filter((listItem) => isPartOfText(value, listItem));
const FilteredOptionsContext = (0, react_1.createContext)({});
const FilteredOptionsProvider = ({ children, value: props }) => {
    const { allowNewValues, filteredOptions: externalFilteredOptions, isListOpen: isExternalListOpen, isLoading, options, } = props;
    const filteredOptionsRef = (0, react_1.useRef)(null);
    const { inputProps: { "aria-describedby": partialAriaDescribedBy, id }, value, searchTerm, setValue, setSearchTerm, shouldAutocomplete, } = (0, inputContext_1.useInputContext)();
    const [filteredOptionsIndex, setFilteredOptionsIndex] = (0, react_1.useState)(null);
    const [isInternalListOpen, setInternalListOpen] = (0, react_1.useState)(false);
    const { customOptions } = (0, customOptionsContext_1.useCustomOptionsContext)();
    const filteredOptions = (0, react_1.useMemo)(() => {
        if (externalFilteredOptions) {
            return externalFilteredOptions;
        }
        const opts = [...customOptions, ...options];
        setFilteredOptionsIndex(null);
        return getMatchingValuesFromList(searchTerm, opts);
    }, [customOptions, externalFilteredOptions, options, searchTerm]);
    const previousSearchTerm = (0, usePrevious_1.default)(searchTerm);
    const [isMouseLastUsedInputDevice, setIsMouseLastUsedInputDevice] = (0, react_1.useState)(false);
    (0, util_1.useClientLayoutEffect)(() => {
        if (shouldAutocomplete &&
            normalizeText(searchTerm) !== "" &&
            ((previousSearchTerm === null || previousSearchTerm === void 0 ? void 0 : previousSearchTerm.length) || 0) < searchTerm.length &&
            filteredOptions.length > 0 &&
            !isValueInList(searchTerm, filteredOptions)) {
            setValue(`${searchTerm}${filteredOptions[0].substring(searchTerm.length)}`);
            setSearchTerm(searchTerm);
        }
    }, [
        filteredOptions,
        previousSearchTerm,
        searchTerm,
        setSearchTerm,
        setValue,
        shouldAutocomplete,
    ]);
    const isListOpen = (0, react_1.useMemo)(() => {
        return isExternalListOpen !== null && isExternalListOpen !== void 0 ? isExternalListOpen : isInternalListOpen;
    }, [isExternalListOpen, isInternalListOpen]);
    const toggleIsListOpen = (0, react_1.useCallback)((newState) => {
        setFilteredOptionsIndex(null);
        setInternalListOpen((oldState) => newState !== null && newState !== void 0 ? newState : !oldState);
    }, []);
    const isValueNew = (0, react_1.useMemo)(() => Boolean(value) && !isValueInList(value, filteredOptions), [value, filteredOptions]);
    const getMinimumIndex = (0, react_1.useCallback)(() => {
        return isValueNew && allowNewValues ? -1 : 0;
    }, [allowNewValues, isValueNew]);
    const ariaDescribedBy = (0, react_1.useMemo)(() => {
        let activeOption;
        if (!isLoading && filteredOptions.length === 0) {
            activeOption = `${id}-no-hits`;
        }
        else if ((value && value !== "") || isLoading) {
            if (shouldAutocomplete && filteredOptions[0]) {
                activeOption = `${id}-option-${filteredOptions[0].replace(" ", "-")}`;
            }
            else if (isListOpen && isLoading) {
                activeOption = `${id}-is-loading`;
            }
        }
        return (0, clsx_1.default)(activeOption, partialAriaDescribedBy) || undefined;
    }, [
        isListOpen,
        isLoading,
        value,
        partialAriaDescribedBy,
        shouldAutocomplete,
        filteredOptions,
        id,
    ]);
    const currentOption = (0, react_1.useMemo)(() => {
        if (filteredOptionsIndex == null) {
            return null;
        }
        if (filteredOptionsIndex === -1) {
            return value;
        }
        return filteredOptions[filteredOptionsIndex];
    }, [filteredOptionsIndex, filteredOptions, value]);
    const resetFilteredOptionsIndex = () => {
        setFilteredOptionsIndex(getMinimumIndex());
    };
    const scrollToOption = (0, react_1.useCallback)((newIndex) => {
        if (filteredOptionsRef.current &&
            filteredOptionsRef.current.children[newIndex]) {
            const child = filteredOptionsRef.current.children[newIndex];
            const { top, bottom } = child.getBoundingClientRect();
            const parentRect = filteredOptionsRef.current.getBoundingClientRect();
            if (top < parentRect.top || bottom > parentRect.bottom) {
                child.scrollIntoView({ block: "nearest" });
            }
        }
    }, []);
    (0, react_1.useEffect)(() => {
        if (filteredOptionsIndex !== null && isListOpen) {
            scrollToOption(filteredOptionsIndex);
        }
    }, [filteredOptionsIndex, isListOpen, scrollToOption]);
    const moveFocusToInput = (0, react_1.useCallback)(() => {
        setFilteredOptionsIndex(null);
        toggleIsListOpen(false);
    }, [toggleIsListOpen]);
    const moveFocusToEnd = (0, react_1.useCallback)(() => {
        const lastIndex = filteredOptions.length - 1;
        toggleIsListOpen(true);
        setFilteredOptionsIndex(lastIndex);
    }, [filteredOptions.length, toggleIsListOpen]);
    const moveFocusUp = (0, react_1.useCallback)(() => {
        if (filteredOptionsIndex === null) {
            return;
        }
        if (filteredOptionsIndex === getMinimumIndex()) {
            toggleIsListOpen(false);
            setFilteredOptionsIndex(null);
        }
        else {
            const newIndex = Math.max(getMinimumIndex(), filteredOptionsIndex - 1);
            setFilteredOptionsIndex(newIndex);
        }
    }, [filteredOptionsIndex, getMinimumIndex, toggleIsListOpen]);
    const moveFocusDown = (0, react_1.useCallback)(() => {
        if (filteredOptionsIndex === null || !isListOpen) {
            toggleIsListOpen(true);
            if (allowNewValues || filteredOptions.length >= 1) {
                setFilteredOptionsIndex(getMinimumIndex());
            }
            return;
        }
        const newIndex = Math.min(filteredOptionsIndex + 1, Math.max(getMinimumIndex(), filteredOptions.length - 1));
        setFilteredOptionsIndex(newIndex);
    }, [
        allowNewValues,
        filteredOptions.length,
        filteredOptionsIndex,
        getMinimumIndex,
        isListOpen,
        toggleIsListOpen,
    ]);
    const activeDecendantId = (0, react_1.useMemo)(() => {
        if (filteredOptionsIndex === null) {
            return undefined;
        }
        else if (filteredOptionsIndex === -1) {
            return `${id}-combobox-new-option`;
        }
        else {
            return `${id}-option-${currentOption === null || currentOption === void 0 ? void 0 : currentOption.replace(" ", "-")}`;
        }
    }, [filteredOptionsIndex, currentOption, id]);
    const filteredOptionsState = {
        activeDecendantId,
        allowNewValues,
        filteredOptionsRef,
        filteredOptionsIndex,
        setFilteredOptionsIndex,
        shouldAutocomplete,
        isListOpen,
        isLoading,
        filteredOptions,
        isMouseLastUsedInputDevice,
        setIsMouseLastUsedInputDevice,
        isValueNew,
        toggleIsListOpen,
        currentOption,
        resetFilteredOptionsIndex,
        moveFocusUp,
        moveFocusDown,
        moveFocusToInput,
        moveFocusToEnd,
        ariaDescribedBy,
    };
    return (react_1.default.createElement(FilteredOptionsContext.Provider, { value: filteredOptionsState }, children));
};
exports.FilteredOptionsProvider = FilteredOptionsProvider;
const useFilteredOptionsContext = () => {
    const context = (0, react_1.useContext)(FilteredOptionsContext);
    if (!context) {
        throw new Error("useFilteredOptionsContext must be used within a FilteredOptionsProvider");
    }
    return context;
};
exports.useFilteredOptionsContext = useFilteredOptionsContext;

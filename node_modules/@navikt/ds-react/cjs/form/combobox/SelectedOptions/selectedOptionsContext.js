"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSelectedOptionsContext = exports.SelectedOptionsProvider = void 0;
const react_1 = __importStar(require("react"));
const usePrevious_1 = __importDefault(require("../../../util/usePrevious"));
const inputContext_1 = require("../Input/inputContext");
const customOptionsContext_1 = require("../customOptionsContext");
const SelectedOptionsContext = (0, react_1.createContext)({});
const SelectedOptionsProvider = ({ children, value, }) => {
    const { clearInput, focusInput } = (0, inputContext_1.useInputContext)();
    const { customOptions, removeCustomOption, addCustomOption, setCustomOptions, } = (0, customOptionsContext_1.useCustomOptionsContext)();
    const { allowNewValues, isMultiSelect, selectedOptions: externalSelectedOptions, onToggleSelected, options, } = value;
    const [internalSelectedOptions, setSelectedOptions] = (0, react_1.useState)([]);
    const selectedOptions = (0, react_1.useMemo)(() => externalSelectedOptions !== null && externalSelectedOptions !== void 0 ? externalSelectedOptions : [...customOptions, ...internalSelectedOptions], [customOptions, externalSelectedOptions, internalSelectedOptions]);
    const addSelectedOption = (0, react_1.useCallback)((option) => {
        var _a;
        const isCustomOption = !options
            .map((opt) => opt.toLowerCase())
            .includes((_a = option === null || option === void 0 ? void 0 : option.toLowerCase) === null || _a === void 0 ? void 0 : _a.call(option));
        if (isCustomOption) {
            allowNewValues && addCustomOption(option);
            !isMultiSelect && setSelectedOptions([]);
        }
        else if (isMultiSelect) {
            setSelectedOptions((prevSelectedOptions) => [
                ...prevSelectedOptions,
                option,
            ]);
        }
        else {
            setSelectedOptions([option]);
            setCustomOptions([]);
        }
        onToggleSelected === null || onToggleSelected === void 0 ? void 0 : onToggleSelected(option, true, isCustomOption);
    }, [
        addCustomOption,
        allowNewValues,
        isMultiSelect,
        onToggleSelected,
        options,
        setCustomOptions,
    ]);
    const removeSelectedOption = (0, react_1.useCallback)((option) => {
        const isCustomOption = customOptions.includes(option);
        if (isCustomOption) {
            removeCustomOption(option);
        }
        else {
            setSelectedOptions((prevSelectedOptions) => prevSelectedOptions.filter((selectedOption) => selectedOption !== option));
        }
        onToggleSelected === null || onToggleSelected === void 0 ? void 0 : onToggleSelected(option, false, isCustomOption);
    }, [customOptions, onToggleSelected, removeCustomOption]);
    const toggleOption = (0, react_1.useCallback)((option, event) => {
        if (selectedOptions.includes(option)) {
            removeSelectedOption(option);
        }
        else {
            addSelectedOption(option);
        }
        clearInput(event);
        focusInput();
    }, [
        addSelectedOption,
        clearInput,
        focusInput,
        removeSelectedOption,
        selectedOptions,
    ]);
    const prevSelectedOptions = (0, usePrevious_1.default)(selectedOptions);
    const selectedOptionsState = {
        addSelectedOption,
        isMultiSelect,
        removeSelectedOption,
        prevSelectedOptions,
        selectedOptions,
        setSelectedOptions,
        toggleOption,
    };
    return (react_1.default.createElement(SelectedOptionsContext.Provider, { value: selectedOptionsState }, children));
};
exports.SelectedOptionsProvider = SelectedOptionsProvider;
const useSelectedOptionsContext = () => {
    const context = (0, react_1.useContext)(SelectedOptionsContext);
    if (!context) {
        throw new Error("useSelectedOptionsContext must be used within a SelectedOptionsProvider");
    }
    return context;
};
exports.useSelectedOptionsContext = useSelectedOptionsContext;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const react_1 = require("@floating-ui/react");
const clsx_1 = __importDefault(require("clsx"));
const react_2 = __importStar(require("react"));
const __1 = require("..");
const util_1 = require("../util");
/**
 * A component that displays a tooltip when the user hovers over its child element.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/tooltip)
 * @see 🏷️ {@link TooltipProps}
 *
 * @example
 * ```jsx
 * <Tooltip content="Skriv ut dokument">
 *   <Button icon={<PrinterLargeIcon title="demo knapp" />} />
 * </Tooltip>
 * ```
 */
exports.Tooltip = (0, react_2.forwardRef)((_a, ref) => {
    var _b;
    var { children, className, arrow: _arrow = true, placement: _placement = "top", open: userOpen, defaultOpen = false, offset: _offset, content, delay = 150, id, keys, maxChar = 80 } = _a, rest = __rest(_a, ["children", "className", "arrow", "placement", "open", "defaultOpen", "offset", "content", "delay", "id", "keys", "maxChar"]);
    const [open, setOpen] = (0, react_2.useState)(defaultOpen);
    const arrowRef = (0, react_2.useRef)(null);
    const rootElement = (_b = (0, __1.useProvider)()) === null || _b === void 0 ? void 0 : _b.rootElement;
    const { x, y, strategy, context, placement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {}, hide: { referenceHidden } = {}, }, refs, } = (0, react_1.useFloating)({
        placement: _placement,
        open: userOpen !== null && userOpen !== void 0 ? userOpen : open,
        onOpenChange: (_open) => setOpen(_open),
        middleware: [
            (0, react_1.offset)(_offset ? _offset : _arrow ? 10 : 2),
            (0, react_1.shift)(),
            (0, react_1.flip)({ padding: 5, fallbackPlacements: ["bottom", "top"] }),
            (0, react_1.arrow)({ element: arrowRef, padding: 5 }),
        ],
        whileElementsMounted: react_1.autoUpdate,
    });
    const { getReferenceProps, getFloatingProps } = (0, react_1.useInteractions)([
        (0, react_1.useHover)(context, { handleClose: (0, react_1.safePolygon)(), restMs: delay }),
        (0, react_1.useFocus)(context),
        (0, react_1.useDismiss)(context),
    ]);
    const ariaId = (0, util_1.useId)(id);
    const mergedRef = (0, react_2.useMemo)(() => (0, util_1.mergeRefs)([ref, refs.setFloating]), [refs.setFloating, ref]);
    const childMergedRef = (0, react_2.useMemo)(() => (0, util_1.mergeRefs)([children.ref, refs.setReference]), [children, refs.setReference]);
    if (!children ||
        (children === null || children === void 0 ? void 0 : children.type) === react_2.default.Fragment ||
        children === react_2.default.Fragment) {
        console.error("<Tooltip> children needs to be a single ReactElement and not: <React.Fragment/> | <></>");
        return null;
    }
    if ((content === null || content === void 0 ? void 0 : content.length) > maxChar) {
        (userOpen !== null && userOpen !== void 0 ? userOpen : open) &&
            console.warn(`Because of strict accessibility concers we encourage all Tooltips to have less than 80 characters. Can be overwritten with the maxChar-prop\n\nLength:${content.length}\nTooltip-content: ${content}`);
    }
    return (react_2.default.createElement(react_2.default.Fragment, null,
        (0, react_2.cloneElement)(children, getReferenceProps(Object.assign(Object.assign({}, children.props), { ref: childMergedRef, "aria-describedby": (userOpen !== null && userOpen !== void 0 ? userOpen : open)
                ? (0, clsx_1.default)(ariaId, children === null || children === void 0 ? void 0 : children.props["aria-describedby"])
                : children === null || children === void 0 ? void 0 : children.props["aria-describedby"] }))),
        react_2.default.createElement(react_1.FloatingPortal, { root: rootElement }, (userOpen !== null && userOpen !== void 0 ? userOpen : open) && (react_2.default.createElement("div", Object.assign({}, getFloatingProps(Object.assign(Object.assign({}, rest), { ref: mergedRef, style: {
                position: strategy,
                top: y !== null && y !== void 0 ? y : 0,
                left: x !== null && x !== void 0 ? x : 0,
                visibility: referenceHidden ? "hidden" : "visible",
            }, role: "tooltip", id: ariaId, className: (0, clsx_1.default)("navds-tooltip", "navds-detail navds-detail--small", className) })), { "data-side": placement }),
            content,
            keys && (react_2.default.createElement("span", { className: "navds-tooltip__keys" }, keys.map((key) => (react_2.default.createElement(__1.Detail, { size: "small", as: "kbd", key: key, className: "navds-tooltip__key" }, key))))),
            _arrow && (react_2.default.createElement("div", { ref: (node) => {
                    arrowRef.current = node;
                }, className: "navds-tooltip__arrow", style: {
                    left: arrowX != null ? `${arrowX}px` : "",
                    top: arrowY != null ? `${arrowY}px` : "",
                    right: "",
                    bottom: "",
                    [{
                        top: "bottom",
                        right: "left",
                        bottom: "top",
                        left: "right",
                    }[placement]]: "-3.5px",
                } })))))));
});
exports.default = exports.Tooltip;

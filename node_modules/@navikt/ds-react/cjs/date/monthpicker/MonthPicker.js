"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthPicker = void 0;
const clsx_1 = __importDefault(require("clsx"));
const react_1 = __importStar(require("react"));
const react_day_picker_1 = require("react-day-picker");
const __1 = require("../..");
const DateInput_1 = require("../DateInput");
const context_1 = require("../context");
const utils_1 = require("../utils");
const MonthCaption_1 = __importDefault(require("./MonthCaption"));
const MonthPickerStandalone_1 = __importDefault(require("./MonthPickerStandalone"));
const MonthSelector_1 = __importDefault(require("./MonthSelector"));
/**
 * A component that displays a month picker.
 *
 * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/monthpicker)
 * @see üè∑Ô∏è {@link MonthPickerProps}
 *
 * @example
 * ```jsx
 *  const { inputProps, monthpickerProps } = useMonthpicker({
 *    onMonthChange: console.log,
 *  });
 *
 *  return (
 *     <MonthPicker {...monthpickerProps} dropdownCaption>
 *       <MonthPicker.Input
 *         {...inputProps}
 *         label="Velg m√•ned"
 *       />
 *     </MonthPicker>
 *  );
 * ```
 */
exports.MonthPicker = (0, react_1.forwardRef)(({ children, dropdownCaption = false, fromDate, toDate, disabled = [], selected, open: _open, id, onClose, onOpenToggle, locale = "nb", onMonthSelect, className, wrapperClassName, defaultSelected, year, onYearChange, strategy = "absolute", bubbleEscape = false, }, ref) => {
    const ariaId = (0, __1.useId)(id);
    const [open, setOpen] = (0, react_1.useState)(_open !== null && _open !== void 0 ? _open : false);
    const wrapperRef = (0, react_1.useRef)(null);
    const [selectedMonth, setSelectedMonth] = (0, react_1.useState)(defaultSelected);
    const handleSelect = (month) => {
        var _a;
        !onMonthSelect && setSelectedMonth(month);
        onMonthSelect === null || onMonthSelect === void 0 ? void 0 : onMonthSelect(month);
        month && ((_a = onClose === null || onClose === void 0 ? void 0 : onClose()) !== null && _a !== void 0 ? _a : setOpen(false));
    };
    if (dropdownCaption && (!fromDate || !toDate)) {
        console.warn("Using dropdownCaption required fromDate and toDate");
        return null;
    }
    return (react_1.default.createElement(context_1.DateContext.Provider, { value: {
            open: _open !== null && _open !== void 0 ? _open : open,
            onOpen: () => {
                setOpen((x) => !x);
                onOpenToggle === null || onOpenToggle === void 0 ? void 0 : onOpenToggle();
            },
            ariaId,
        } },
        react_1.default.createElement("div", { ref: wrapperRef, className: (0, clsx_1.default)("navds-date__wrapper", wrapperClassName) },
            children,
            (_open !== null && _open !== void 0 ? _open : open) && (react_1.default.createElement(__1.Popover, { arrow: false, anchorEl: wrapperRef.current, open: _open !== null && _open !== void 0 ? _open : open, onClose: () => { var _a; return (_a = onClose === null || onClose === void 0 ? void 0 : onClose()) !== null && _a !== void 0 ? _a : setOpen(false); }, placement: "bottom-start", role: "dialog", ref: ref, id: ariaId, className: "navds-date navds-date__popover", strategy: strategy, bubbleEscape: bubbleEscape },
                react_1.default.createElement(react_day_picker_1.RootProvider, { locale: (0, utils_1.getLocaleFromString)(locale), selected: selected !== null && selected !== void 0 ? selected : selectedMonth, toDate: toDate, fromDate: fromDate, month: selected !== null && selected !== void 0 ? selected : selectedMonth },
                    react_1.default.createElement("div", { className: (0, clsx_1.default)("rdp-month", className) },
                        react_1.default.createElement(context_1.SharedMonthProvider, { dropdownCaption: dropdownCaption, disabled: disabled, selected: selected !== null && selected !== void 0 ? selected : selectedMonth, onSelect: handleSelect, year: year, onYearChange: onYearChange },
                            react_1.default.createElement(MonthCaption_1.default, null),
                            react_1.default.createElement(MonthSelector_1.default, null)))))))));
});
exports.MonthPicker.Standalone = MonthPickerStandalone_1.default;
exports.MonthPicker.Input = DateInput_1.MonthPickerInput;
exports.default = exports.MonthPicker;

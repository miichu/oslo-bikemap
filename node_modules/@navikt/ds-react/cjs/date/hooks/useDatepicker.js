"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDatepicker = void 0;
const differenceInCalendarDays_1 = __importDefault(require("date-fns/differenceInCalendarDays"));
const isWeekend_1 = __importDefault(require("date-fns/isWeekend"));
const react_1 = require("react");
const react_day_picker_1 = require("react-day-picker");
const utils_1 = require("../utils");
const useEscape_1 = require("./useEscape");
const useOutsideClickHandler_1 = require("./useOutsideClickHandler");
const getValidationMessage = (val = {}) => (Object.assign({ isDisabled: false, isWeekend: false, isEmpty: false, isInvalid: false, isBefore: false, isAfter: false, isValidDate: true }, val));
/**
 *
 * @see 🏷️ {@link UseDatepickerOptions}
 * @see 🏷️ {@link UseDatepickerValue}
 * @see 🏷️ {@link DateValidationT}
 * @example
 * const { datepickerProps, inputProps } = useDatepicker({
 *   fromDate: new Date("Aug 23 2019"),
 *   toDate: new Date("Feb 23 2024"),
 *   onDateChange: console.log,
 *   onValidate: console.log,
 * });
 */
const useDatepicker = (opt = {}) => {
    var _a, _b;
    const { locale: _locale = "nb", required, defaultSelected: _defaultSelected, today = new Date(), fromDate, toDate, disabled, disableWeekends, onDateChange, inputFormat, onValidate, defaultMonth, allowTwoDigitYear = true, openOnFocus = true, } = opt;
    const locale = (0, utils_1.getLocaleFromString)(_locale);
    const inputRef = (0, react_1.useRef)(null);
    const [daypickerRef, setDaypickerRef] = (0, react_1.useState)();
    const [defaultSelected, setDefaultSelected] = (0, react_1.useState)(_defaultSelected);
    // Initialize states
    const [month, setMonth] = (0, react_1.useState)((_a = defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : defaultMonth) !== null && _a !== void 0 ? _a : today);
    const [selectedDay, setSelectedDay] = (0, react_1.useState)(defaultSelected);
    const [open, setOpen] = (0, react_1.useState)(false);
    const defaultInputValue = defaultSelected
        ? (0, utils_1.formatDateForInput)(defaultSelected, locale, "date", inputFormat)
        : "";
    const [inputValue, setInputValue] = (0, react_1.useState)(defaultInputValue);
    const handleOpen = (0, react_1.useCallback)((open) => {
        var _a, _b;
        setOpen(open);
        open && setMonth((_b = (_a = selectedDay !== null && selectedDay !== void 0 ? selectedDay : defaultSelected) !== null && _a !== void 0 ? _a : defaultMonth) !== null && _b !== void 0 ? _b : today);
    }, [defaultMonth, defaultSelected, selectedDay, today]);
    (0, useOutsideClickHandler_1.useOutsideClickHandler)(open, handleOpen, [
        daypickerRef,
        inputRef.current,
        (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.nextSibling,
    ]);
    (0, useEscape_1.useEscape)(open, handleOpen, inputRef);
    const updateDate = (date) => {
        onDateChange === null || onDateChange === void 0 ? void 0 : onDateChange(date);
        setSelectedDay(date);
    };
    const updateValidation = (val = {}) => onValidate === null || onValidate === void 0 ? void 0 : onValidate(getValidationMessage(val));
    const reset = () => {
        var _a;
        updateDate(defaultSelected);
        setMonth((_a = defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : defaultMonth) !== null && _a !== void 0 ? _a : today);
        setInputValue(defaultInputValue !== null && defaultInputValue !== void 0 ? defaultInputValue : "");
        setDefaultSelected(_defaultSelected);
    };
    const setSelected = (date) => {
        var _a;
        updateDate(date);
        setMonth((_a = date !== null && date !== void 0 ? date : defaultMonth) !== null && _a !== void 0 ? _a : today);
        setInputValue(date ? (0, utils_1.formatDateForInput)(date, locale, "date", inputFormat) : "");
    };
    const handleFocus = (e) => {
        if (e.target.readOnly) {
            return;
        }
        !open && openOnFocus && handleOpen(true);
        const day = (0, utils_1.parseDate)(e.target.value, today, locale, "date", allowTwoDigitYear);
        if ((0, utils_1.isValidDate)(day)) {
            setInputValue((0, utils_1.formatDateForInput)(day, locale, "date", inputFormat));
            const isBefore = fromDate && day && (0, differenceInCalendarDays_1.default)(fromDate, day) > 0;
            const isAfter = toDate && day && (0, differenceInCalendarDays_1.default)(day, toDate) > 0;
            !isBefore && !isAfter && setMonth(day);
        }
    };
    const handleBlur = (e) => {
        const day = (0, utils_1.parseDate)(e.target.value, today, locale, "date", allowTwoDigitYear);
        (0, utils_1.isValidDate)(day) &&
            setInputValue((0, utils_1.formatDateForInput)(day, locale, "date", inputFormat));
    };
    /* Only allow de-selecting if not required */
    const handleDayClick = (day, { selected }) => {
        if (day && !selected) {
            handleOpen(false);
            inputRef.current && inputRef.current.focus();
        }
        if (!required && selected) {
            updateDate(undefined);
            setInputValue("");
            updateValidation({ isValidDate: false, isEmpty: true });
            return;
        }
        updateDate(day);
        updateValidation();
        setMonth(day);
        setInputValue(day ? (0, utils_1.formatDateForInput)(day, locale, "date", inputFormat) : "");
    };
    // When changing the input field, save its value in state and check if the
    // string is a valid date. If it is a valid day, set it as selected and update
    // the calendar’s month.
    const handleChange = (e) => {
        setInputValue(e.target.value);
        const day = (0, utils_1.parseDate)(e.target.value, today, locale, "date", allowTwoDigitYear);
        const isBefore = fromDate && day && (0, differenceInCalendarDays_1.default)(fromDate, day) > 0;
        const isAfter = toDate && day && (0, differenceInCalendarDays_1.default)(day, toDate) > 0;
        if (!(0, utils_1.isValidDate)(day) ||
            (disableWeekends && (0, isWeekend_1.default)(day)) ||
            (disabled && (0, react_day_picker_1.isMatch)(day, disabled))) {
            updateDate(undefined);
            updateValidation({
                isInvalid: (0, utils_1.isValidDate)(day),
                isWeekend: disableWeekends && (0, isWeekend_1.default)(day),
                isDisabled: disabled && (0, react_day_picker_1.isMatch)(day, disabled),
                isValidDate: false,
                isEmpty: !e.target.value,
                isBefore: isBefore !== null && isBefore !== void 0 ? isBefore : false,
                isAfter: isAfter !== null && isAfter !== void 0 ? isAfter : false,
            });
            return;
        }
        if (isBefore || isAfter) {
            updateDate(undefined);
            updateValidation({
                isValidDate: false,
                isBefore: isBefore !== null && isBefore !== void 0 ? isBefore : false,
                isAfter: isAfter !== null && isAfter !== void 0 ? isAfter : false,
            });
            return;
        }
        updateDate(day);
        updateValidation();
        setMonth(defaultMonth !== null && defaultMonth !== void 0 ? defaultMonth : day);
    };
    const datepickerProps = {
        month,
        onMonthChange: (month) => setMonth(month),
        onDayClick: handleDayClick,
        selected: selectedDay !== null && selectedDay !== void 0 ? selectedDay : new Date("Invalid date"),
        locale: _locale,
        fromDate,
        toDate,
        today,
        open,
        onOpenToggle: () => handleOpen(!open),
        disabled,
        disableWeekends,
        bubbleEscape: true,
        ref: setDaypickerRef,
    };
    const inputProps = {
        onChange: handleChange,
        onFocus: handleFocus,
        onBlur: handleBlur,
        value: inputValue,
        ref: inputRef,
    };
    return { datepickerProps, inputProps, reset, selectedDay, setSelected };
};
exports.useDatepicker = useDatepicker;

[
  {
    "filePath": "src/accordion/Accordion.tsx",
    "displayName": "Accordion",
    "props": {
      "variant": {
        "defaultValue": {
          "value": "'default'"
        },
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "src/accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"neutral\""
        }
      },
      "headingSize": {
        "defaultValue": {
          "value": "'small'"
        },
        "description": "",
        "name": "headingSize",
        "parent": {
          "fileName": "src/accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"large\" | \"medium\" | \"small\" | \"xsmall\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"large\" | \"medium\" | \"small\""
        }
      },
      "indent": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to indent content or not",
        "name": "indent",
        "parent": {
          "fileName": "src/accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Instances of Accordion.Item",
        "name": "children",
        "parent": {
          "fileName": "src/accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/accordion/AccordionContent.tsx",
    "displayName": "AccordionContent",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content inside Accordion.Content",
        "name": "children",
        "parent": {
          "fileName": "src/accordion/AccordionContent.tsx",
          "name": "AccordionContentProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionContent.tsx",
            "name": "AccordionContentProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/accordion/AccordionHeader.tsx",
    "displayName": "AccordionHeader",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Text inside Accordion.Header",
        "name": "children",
        "parent": {
          "fileName": "src/accordion/AccordionHeader.tsx",
          "name": "AccordionHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionHeader.tsx",
            "name": "AccordionHeaderProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/accordion/AccordionItem.tsx",
    "displayName": "AccordionItem",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content in Accordion.Item\nShould include one Accordion.Header and one Accordion.Content",
        "name": "children",
        "parent": {
          "fileName": "src/accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Controlled open-state\nUsing this removes automatic control of open-state",
        "name": "open",
        "parent": {
          "fileName": "src/accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Defaults the accordion to open if not controlled",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/accordion/AccordionItem.tsx",
          "name": "AccordionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/accordion/AccordionItem.tsx",
            "name": "AccordionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/alert/Alert.tsx",
    "displayName": "Alert",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Alert content",
        "name": "children",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Changes colors and icon usage when changed",
        "name": "variant",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": true,
        "type": {
          "name": "\"error\" | \"warning\" | \"info\" | \"success\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding and font-sizes",
        "name": "size",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "fullWidth": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Removes border-radius",
        "name": "fullWidth",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Removes background from Alert",
        "name": "inline",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeButton": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Removes close-button(X) when false\nRequires onClose to be set",
        "name": "closeButton",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Callback for alert wanting to close\nrequires closeButton to be true",
        "name": "onClose",
        "parent": {
          "fileName": "src/alert/Alert.tsx",
          "name": "AlertProps"
        },
        "declarations": [
          {
            "fileName": "src/alert/Alert.tsx",
            "name": "AlertProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/button/Button.tsx",
    "displayName": "Button",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Button content",
        "name": "children",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "primary"
        },
        "description": "Changes design and interaction-visuals",
        "name": "variant",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"primary-neutral\" | \"secondary\" | \"secondary-neutral\" | \"tertiary\" | \"tertiary-neutral\" | \"danger\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding, height and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\" | \"xsmall\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Prevent the user from interacting with the button: it cannot be pressed or focused.\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Replaces button content with a Loader component, keeps width",
        "name": "loading",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Button Icon",
        "name": "icon",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconPosition": {
        "defaultValue": {
          "value": "left"
        },
        "description": "Icon position in Button",
        "name": "iconPosition",
        "parent": {
          "fileName": "src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/chat/Bubble.tsx",
    "displayName": "Bubble",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Bubble text",
        "name": "children",
        "parent": {
          "fileName": "src/chat/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "name/sender on bubble",
        "name": "name",
        "parent": {
          "fileName": "src/chat/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "timestamp": {
        "defaultValue": null,
        "description": "Timestamp for sent message",
        "name": "timestamp",
        "parent": {
          "fileName": "src/chat/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "backgroundColor": {
        "defaultValue": null,
        "description": "Background color on bubble\n@deprecated Use `variant` on Chat instead",
        "name": "backgroundColor",
        "parent": {
          "fileName": "src/chat/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "toptextPosition": {
        "defaultValue": null,
        "description": "Overrides hoizontal position of toptext",
        "name": "toptextPosition",
        "parent": {
          "fileName": "src/chat/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/chat/Chat.tsx",
    "displayName": "Chat",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Children of type <Chat.Bubble />",
        "name": "children",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Chat-message name",
        "name": "name",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "timestamp": {
        "defaultValue": null,
        "description": "Timestamp for sent message",
        "name": "timestamp",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "avatar": {
        "defaultValue": null,
        "description": "Avatar for messenger. Regular text for initials works too, but it will be hidden for screen readers.",
        "name": "avatar",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"neutral\""
        },
        "description": "Changes background color on avatar and bubbles.\nAvoid using the same background as the surface behind Chat.",
        "name": "variant",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"subtle\" | \"info\" | \"neutral\""
        }
      },
      "backgroundColor": {
        "defaultValue": null,
        "description": "Background color on bubbles\n@deprecated Use `variant` instead",
        "name": "backgroundColor",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "avatarBgColor": {
        "defaultValue": null,
        "description": "Background color for avatar\n@deprecated Use `variant` instead",
        "name": "avatarBgColor",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "position": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Positions avatar and bubbles",
        "name": "position",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "toptextPosition": {
        "defaultValue": {
          "value": "Same as position"
        },
        "description": "Hoizontal position of toptext",
        "name": "toptextPosition",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Affects padding and font size in bubbles",
        "name": "size",
        "parent": {
          "fileName": "src/chat/Chat.tsx",
          "name": "ChatProps"
        },
        "declarations": [
          {
            "fileName": "src/chat/Chat.tsx",
            "name": "ChatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/chips/Chips.tsx",
    "displayName": "Chips",
    "props": {
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding and font-sizes",
        "name": "size",
        "parent": {
          "fileName": "src/chips/Chips.tsx",
          "name": "ChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Chips.tsx",
            "name": "ChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLUListElement>"
        }
      }
    }
  },
  {
    "filePath": "src/chips/Removable.tsx",
    "displayName": "RemovableChips",
    "props": {
      "variant": {
        "defaultValue": {
          "value": "action"
        },
        "description": "Chip-variants",
        "name": "variant",
        "parent": {
          "fileName": "src/chips/Removable.tsx",
          "name": "RemovableChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Removable.tsx",
            "name": "RemovableChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"action\" | \"neutral\""
        }
      },
      "removeLabel": {
        "defaultValue": {
          "value": "slett"
        },
        "description": "Replaces label read for screen-readers",
        "name": "removeLabel",
        "parent": {
          "fileName": "src/chips/Removable.tsx",
          "name": "RemovableChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Removable.tsx",
            "name": "RemovableChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onDelete": {
        "defaultValue": null,
        "description": "Click callback",
        "name": "onDelete",
        "parent": {
          "fileName": "src/chips/Removable.tsx",
          "name": "RemovableChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Removable.tsx",
            "name": "RemovableChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/chips/Removable.tsx",
    "displayName": "Removable",
    "props": {
      "variant": {
        "defaultValue": {
          "value": "action"
        },
        "description": "Chip-variants",
        "name": "variant",
        "parent": {
          "fileName": "src/chips/Removable.tsx",
          "name": "RemovableChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Removable.tsx",
            "name": "RemovableChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"action\" | \"neutral\""
        }
      },
      "removeLabel": {
        "defaultValue": {
          "value": "slett"
        },
        "description": "Replaces label read for screen-readers",
        "name": "removeLabel",
        "parent": {
          "fileName": "src/chips/Removable.tsx",
          "name": "RemovableChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Removable.tsx",
            "name": "RemovableChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onDelete": {
        "defaultValue": null,
        "description": "Click callback",
        "name": "onDelete",
        "parent": {
          "fileName": "src/chips/Removable.tsx",
          "name": "RemovableChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Removable.tsx",
            "name": "RemovableChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/chips/Toggle.tsx",
    "displayName": "ToggleChips",
    "props": {
      "selected": {
        "defaultValue": null,
        "description": "Toggles aria-pressed and visual-changes",
        "name": "selected",
        "parent": {
          "fileName": "src/chips/Toggle.tsx",
          "name": "ToggleChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Toggle.tsx",
            "name": "ToggleChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "action"
        },
        "description": "Chip-variants",
        "name": "variant",
        "parent": {
          "fileName": "src/chips/Toggle.tsx",
          "name": "ToggleChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Toggle.tsx",
            "name": "ToggleChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"action\" | \"neutral\""
        }
      },
      "checkmark": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Toggles display of checkmark on selected",
        "name": "checkmark",
        "parent": {
          "fileName": "src/chips/Toggle.tsx",
          "name": "ToggleChipsProps"
        },
        "declarations": [
          {
            "fileName": "src/chips/Toggle.tsx",
            "name": "ToggleChipsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/copybutton/CopyButton.tsx",
    "displayName": "CopyButton",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\" | \"xsmall\""
        }
      },
      "variant": {
        "defaultValue": {
          "value": "neutral"
        },
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"action\" | \"neutral\""
        }
      },
      "copyText": {
        "defaultValue": null,
        "description": "Text to copy to clipboard",
        "name": "copyText",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "text": {
        "defaultValue": null,
        "description": "Optional text in button",
        "name": "text",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeText": {
        "defaultValue": {
          "value": "Kopiert!"
        },
        "description": "Text shown when button is clicked\nOnly set if used with 'text'-prop",
        "name": "activeText",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onActiveChange": {
        "defaultValue": null,
        "description": "Callback when 'copied'-state is active",
        "name": "onActiveChange",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((state: boolean) => void)"
        }
      },
      "icon": {
        "defaultValue": {
          "value": "<FilesIcon />"
        },
        "description": "Icon shown when button is not clicked",
        "name": "icon",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "activeIcon": {
        "defaultValue": {
          "value": "<CheckmarkIcon />"
        },
        "description": "Icon shown when active",
        "name": "activeIcon",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "activeDuration": {
        "defaultValue": {
          "value": "2000"
        },
        "description": "Timeout duration in milliseconds",
        "name": "activeDuration",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "title": {
        "defaultValue": {
          "value": "Kopier"
        },
        "description": "* accessible label for icon (ignored if text is set)",
        "name": "title",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeTitle": {
        "defaultValue": {
          "value": "Kopiert"
        },
        "description": "accessible label for icon in active-state (ignored if text is set)",
        "name": "activeTitle",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "iconPosition": {
        "defaultValue": {
          "value": "left"
        },
        "description": "Icon position in Button",
        "name": "iconPosition",
        "parent": {
          "fileName": "src/copybutton/CopyButton.tsx",
          "name": "CopyButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/copybutton/CopyButton.tsx",
            "name": "CopyButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/date/DateInput.tsx",
    "displayName": "DatePickerInput",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Input label",
        "name": "label",
        "parent": {
          "fileName": "src/date/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "src/date/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Shows label and description for screenreaders-only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/date/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "src/date/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding and font-sizes",
        "name": "size",
        "parent": {
          "fileName": "src/date/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "src/date/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "@private",
        "name": "variant",
        "parent": {
          "fileName": "src/date/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "src/date/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"datepicker\" | \"monthpicker\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/date/DateInput.tsx",
    "displayName": "MonthPickerInput",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Input label",
        "name": "label",
        "parent": {
          "fileName": "src/date/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "src/date/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Shows label and description for screenreaders-only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/date/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "src/date/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding and font-sizes",
        "name": "size",
        "parent": {
          "fileName": "src/date/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "src/date/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "@private",
        "name": "variant",
        "parent": {
          "fileName": "src/date/DateInput.tsx",
          "name": "DateInputProps"
        },
        "declarations": [
          {
            "fileName": "src/date/DateInput.tsx",
            "name": "DateInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"datepicker\" | \"monthpicker\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Dropdown.tsx",
    "displayName": "Dropdown",
    "props": {
      "onSelect": {
        "defaultValue": null,
        "description": "Handler called when an item is selected.",
        "name": "onSelect",
        "parent": {
          "fileName": "src/dropdown/Dropdown.tsx",
          "name": "DropdownProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Dropdown.tsx",
            "name": "DropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((element: MouseEvent<Element, MouseEvent>) => void)"
        }
      },
      "closeOnSelect": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the Menu closes when a selection is made.",
        "name": "closeOnSelect",
        "parent": {
          "fileName": "src/dropdown/Dropdown.tsx",
          "name": "DropdownProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Dropdown.tsx",
            "name": "DropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/dropdown/Dropdown.tsx",
          "name": "DropdownProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Dropdown.tsx",
            "name": "DropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Controlled state of the dropdown. When set, you will need to handle onClose and onSelect manually.",
        "name": "open",
        "parent": {
          "fileName": "src/dropdown/Dropdown.tsx",
          "name": "DropdownProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Dropdown.tsx",
            "name": "DropdownProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Toggle.tsx",
    "displayName": "Toggle",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Button content",
        "name": "children",
        "parent": {
          "fileName": "src/dropdown/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/expansion-card/ExpansionCard.tsx",
    "displayName": "ExpansionCard",
    "props": {
      "onToggle": {
        "defaultValue": null,
        "description": "Callback for when Card is toggled open/closed",
        "name": "onToggle",
        "parent": {
          "fileName": "src/expansion-card/ExpansionCard.tsx",
          "name": "ExpansionCardCommonProps"
        },
        "declarations": [
          {
            "fileName": "src/expansion-card/ExpansionCard.tsx",
            "name": "ExpansionCardCommonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((open: boolean) => void)"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Controlled open-state\nUsing this removes automatic control of open-state",
        "name": "open",
        "parent": {
          "fileName": "src/expansion-card/ExpansionCard.tsx",
          "name": "ExpansionCardCommonProps"
        },
        "declarations": [
          {
            "fileName": "src/expansion-card/ExpansionCard.tsx",
            "name": "ExpansionCardCommonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Defaults to open if not controlled",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/expansion-card/ExpansionCard.tsx",
          "name": "ExpansionCardCommonProps"
        },
        "declarations": [
          {
            "fileName": "src/expansion-card/ExpansionCard.tsx",
            "name": "ExpansionCardCommonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/expansion-card/ExpansionCard.tsx",
          "name": "ExpansionCardCommonProps"
        },
        "declarations": [
          {
            "fileName": "src/expansion-card/ExpansionCard.tsx",
            "name": "ExpansionCardCommonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.\nShould be set if not using 'aria-labelledby'\n@see aria-labelledby.",
        "name": "aria-label",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "src/expansion-card/ExpansionCard.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that labels the current element.\nShould be set if not using 'aria-label'\n@see aria-describedby.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "src/expansion-card/ExpansionCard.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/expansion-card/ExpansionCardContent.tsx",
    "displayName": "ExpansionCardContent",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/expansion-card/ExpansionCardDescription.tsx",
    "displayName": "ExpansionCardDescription",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/expansion-card/ExpansionCardHeader.tsx",
    "displayName": "ExpansionCardHeader",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/expansion-card/ExpansionCardTitle.tsx",
    "displayName": "ExpansionCardTitle",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes text-sizing",
        "name": "size",
        "parent": {
          "fileName": "src/expansion-card/ExpansionCardTitle.tsx",
          "name": "ExpansionCardTitleProps"
        },
        "declarations": [
          {
            "fileName": "src/expansion-card/ExpansionCardTitle.tsx",
            "name": "ExpansionCardTitleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"large\" | \"medium\" | \"small\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLHeadingElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/ConfirmationPanel.tsx",
    "displayName": "ConfirmationPanel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Additional information on panel",
        "name": "children",
        "parent": {
          "fileName": "src/form/ConfirmationPanel.tsx",
          "name": "ConfirmationPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/ConfirmationPanel.tsx",
            "name": "ConfirmationPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Checkbox label",
        "name": "label",
        "parent": {
          "fileName": "src/form/ConfirmationPanel.tsx",
          "name": "ConfirmationPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/ConfirmationPanel.tsx",
            "name": "ConfirmationPanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "src/form/ConfirmationPanel.tsx",
          "name": "ConfirmationPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/ConfirmationPanel.tsx",
            "name": "ConfirmationPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "src/form/ConfirmationPanel.tsx",
          "name": "ConfirmationPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/ConfirmationPanel.tsx",
            "name": "ConfirmationPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the HTML element.",
        "name": "value",
        "parent": {
          "fileName": "react/src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of Checkbox",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/ReadOnlyIcon.tsx",
    "displayName": "ReadOnlyIcon",
    "props": {
      "readOnly": {
        "defaultValue": null,
        "description": "",
        "name": "readOnly",
        "declarations": [
          {
            "fileName": "src/form/ReadOnlyIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "nativeReadOnly": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "nativeReadOnly",
        "declarations": [
          {
            "fileName": "src/form/ReadOnlyIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "filePath": "src/form/Select.tsx",
    "displayName": "Select",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Collection of <option />-elements",
        "name": "children",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "htmlSize": {
        "defaultValue": null,
        "description": "Exposes the HTML size attribute",
        "name": "htmlSize",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for select",
        "name": "label",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "If enabled shows the label and description for screenreaders only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Sets inline-style on select wrapper",
        "name": "style",
        "parent": {
          "fileName": "src/form/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLSelectElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/Switch.tsx",
    "displayName": "Switch",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Switch-label",
        "name": "children",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "If enabled shows the label and description for screenreaders only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Toggles loading state with loader-component on switch",
        "name": "loading",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "position": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Positions switch on left/right side of label",
        "name": "position",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of Switch",
        "name": "description",
        "parent": {
          "fileName": "src/form/Switch.tsx",
          "name": "SwitchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Switch.tsx",
            "name": "SwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/TextField.tsx",
    "displayName": "TextField",
    "props": {
      "value": {
        "defaultValue": null,
        "description": "Controlled value",
        "name": "value",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Defaults input-value without needing controlled-state",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "htmlSize": {
        "defaultValue": null,
        "description": "Exposes the HTML size attribute",
        "name": "htmlSize",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "If enabled shows the label and description for screenreaders only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "TextField label",
        "name": "label",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "type": {
        "defaultValue": {
          "value": "\"text\""
        },
        "description": "Type of form control. Picking the correct type helps user fill inn their required information",
        "name": "type",
        "parent": {
          "fileName": "src/form/TextField.tsx",
          "name": "TextFieldProps"
        },
        "declarations": [
          {
            "fileName": "src/form/TextField.tsx",
            "name": "TextFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"number\" | \"email\" | \"password\" | \"tel\" | \"text\" | \"url\" | \"time\""
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/Textarea.tsx",
    "displayName": "Textarea",
    "props": {
      "maxLength": {
        "defaultValue": null,
        "description": "Allowed character-count for content\n@note This is just a visual indicator! You will need to handle actual character-limits/validation if needed",
        "name": "maxLength",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled value",
        "name": "value",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Defaults input-value without needing controlled-state",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxRows": {
        "defaultValue": null,
        "description": "Maximum number of character rows to display.\n@bug Internal scrolling with `maxLength` scrolls over maxLength-text",
        "name": "maxRows",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minRows": {
        "defaultValue": null,
        "description": "Minimum number of character-rows to display when empty.",
        "name": "minRows",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Textarea label",
        "name": "label",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "If enabled shows the label and description for screenreaders only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "resize": {
        "defaultValue": null,
        "description": "Enables resizing of field",
        "name": "resize",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "i18n": {
        "defaultValue": null,
        "description": "i18n-translations for counter-text",
        "name": "i18n",
        "parent": {
          "fileName": "src/form/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ counterLeft?: string; counterTooMuch?: string; } | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTextAreaElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/Textarea.tsx",
    "displayName": "Counter",
    "props": {
      "maxLength": {
        "defaultValue": null,
        "description": "",
        "name": "maxLength",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "currentLength": {
        "defaultValue": null,
        "description": "",
        "name": "currentLength",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "i18n": {
        "defaultValue": null,
        "description": "",
        "name": "i18n",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "filePath": "src/grid/Cell.tsx",
    "displayName": "Cell",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Cell content",
        "name": "children",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "xs": {
        "defaultValue": null,
        "description": "Cell columns on width < 448px",
        "name": "xs",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Column"
        }
      },
      "sm": {
        "defaultValue": null,
        "description": "Cell columns on min-width: 448",
        "name": "sm",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Column"
        }
      },
      "md": {
        "defaultValue": null,
        "description": "Cell columns on min-width: 648",
        "name": "md",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Column"
        }
      },
      "lg": {
        "defaultValue": null,
        "description": "Cell columns on min-width: 960px",
        "name": "lg",
        "parent": {
          "fileName": "src/grid/Cell.tsx",
          "name": "CellProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Cell.tsx",
            "name": "CellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Column"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/grid/Grid.tsx",
    "displayName": "Grid",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Collection of <Cell>-elements",
        "name": "children",
        "parent": {
          "fileName": "src/grid/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "src/grid/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/guide-panel/GuidePanel.tsx",
    "displayName": "GuidePanel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "GuidePanel content",
        "name": "children",
        "parent": {
          "fileName": "src/guide-panel/GuidePanel.tsx",
          "name": "GuidePanelProps"
        },
        "declarations": [
          {
            "fileName": "src/guide-panel/GuidePanel.tsx",
            "name": "GuidePanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "illustration": {
        "defaultValue": null,
        "description": "Custom svg/img element",
        "name": "illustration",
        "parent": {
          "fileName": "src/guide-panel/GuidePanel.tsx",
          "name": "GuidePanelProps"
        },
        "declarations": [
          {
            "fileName": "src/guide-panel/GuidePanel.tsx",
            "name": "GuidePanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "poster": {
        "defaultValue": {
          "value": "true on mobile (<480px)"
        },
        "description": "Render illustation above content",
        "name": "poster",
        "parent": {
          "fileName": "src/guide-panel/GuidePanel.tsx",
          "name": "GuidePanelProps"
        },
        "declarations": [
          {
            "fileName": "src/guide-panel/GuidePanel.tsx",
            "name": "GuidePanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/help-text/HelpText.tsx",
    "displayName": "HelpText",
    "props": {
      "title": {
        "defaultValue": {
          "value": "hjelp"
        },
        "description": "Adds a title-tooltip with the given text",
        "name": "title",
        "parent": {
          "fileName": "src/help-text/HelpText.tsx",
          "name": "HelpTextProps"
        },
        "declarations": [
          {
            "fileName": "src/help-text/HelpText.tsx",
            "name": "HelpTextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "top"
        },
        "description": "Default dialog-placement on open",
        "name": "placement",
        "parent": {
          "fileName": "src/help-text/HelpText.tsx",
          "name": "HelpTextProps"
        },
        "declarations": [
          {
            "fileName": "src/help-text/HelpText.tsx",
            "name": "HelpTextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\" | \"right\" | \"left\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\""
        }
      },
      "wrapperClassName": {
        "defaultValue": null,
        "description": "Classname for wrapper",
        "name": "wrapperClassName",
        "parent": {
          "fileName": "src/help-text/HelpText.tsx",
          "name": "HelpTextProps"
        },
        "declarations": [
          {
            "fileName": "src/help-text/HelpText.tsx",
            "name": "HelpTextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strategy": {
        "defaultValue": {
          "value": "absolute"
        },
        "description": "Changes what CSS position property to use\nYou want to use \"fixed\" if reference element is inside a fixed container, but popover is not",
        "name": "strategy",
        "parent": {
          "fileName": "react/src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "react/src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"absolute\" | \"fixed\""
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/help-text/HelpTextIcon.tsx",
    "displayName": "HelpTextIcon",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "declarations": [
          {
            "fileName": "src/help-text/HelpTextIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "filled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "filled",
        "declarations": [
          {
            "fileName": "src/help-text/HelpTextIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "filePath": "src/internal-header/InternalHeader.tsx",
    "displayName": "InternalHeader",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLElement>"
        }
      }
    }
  },
  {
    "filePath": "src/internal-header/InternalHeaderButton.tsx",
    "displayName": "InternalHeaderButton",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Application Button",
        "name": "children",
        "parent": {
          "fileName": "src/internal-header/InternalHeaderButton.tsx",
          "name": "InternalHeaderButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/internal-header/InternalHeaderButton.tsx",
            "name": "InternalHeaderButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/internal-header/InternalHeaderTitle.tsx",
    "displayName": "InternalHeaderTitle",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Application title",
        "name": "children",
        "parent": {
          "fileName": "src/internal-header/InternalHeaderTitle.tsx",
          "name": "InternalHeaderTitleProps"
        },
        "declarations": [
          {
            "fileName": "src/internal-header/InternalHeaderTitle.tsx",
            "name": "InternalHeaderTitleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/internal-header/InternalHeaderUser.tsx",
    "displayName": "InternalHeaderUser",
    "props": {
      "name": {
        "defaultValue": null,
        "description": "User name",
        "name": "name",
        "parent": {
          "fileName": "src/internal-header/InternalHeaderUser.tsx",
          "name": "InternalHeaderUserProps"
        },
        "declarations": [
          {
            "fileName": "src/internal-header/InternalHeaderUser.tsx",
            "name": "InternalHeaderUserProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "User description",
        "name": "description",
        "parent": {
          "fileName": "src/internal-header/InternalHeaderUser.tsx",
          "name": "InternalHeaderUserProps"
        },
        "declarations": [
          {
            "fileName": "src/internal-header/InternalHeaderUser.tsx",
            "name": "InternalHeaderUserProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/internal-header/InternalHeaderUserButton.tsx",
    "displayName": "InternalHeaderUserButton",
    "props": {
      "name": {
        "defaultValue": null,
        "description": "User name",
        "name": "name",
        "parent": {
          "fileName": "src/internal-header/InternalHeaderUserButton.tsx",
          "name": "InternalHeaderUserButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/internal-header/InternalHeaderUserButton.tsx",
            "name": "InternalHeaderUserButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "User description",
        "name": "description",
        "parent": {
          "fileName": "src/internal-header/InternalHeaderUserButton.tsx",
          "name": "InternalHeaderUserButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/internal-header/InternalHeaderUserButton.tsx",
            "name": "InternalHeaderUserButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/link/Link.tsx",
    "displayName": "Link",
    "props": {
      "underline": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Inverts when the underline appears. If this is false,\nthe underline does not appear by default, but does appear when the link is hovered.\nThis makes it more suitable for use when inlined in text.",
        "name": "underline",
        "parent": {
          "fileName": "src/link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "src/link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inlineText": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Renders link with `display: inline` for better wrapping in text.",
        "name": "inlineText",
        "parent": {
          "fileName": "src/link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "src/link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "action"
        },
        "description": "Variant of the component to use.",
        "name": "variant",
        "parent": {
          "fileName": "src/link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "src/link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"action\" | \"neutral\" | \"subtle\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Link text",
        "name": "children",
        "parent": {
          "fileName": "src/link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "src/link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/link-panel/LinkPanel.tsx",
    "displayName": "LinkPanelComponent",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Panel content",
        "name": "children",
        "parent": {
          "fileName": "src/link-panel/LinkPanel.tsx",
          "name": "LinkPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/link-panel/LinkPanel.tsx",
            "name": "LinkPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "border": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Adds border to panel if true",
        "name": "border",
        "parent": {
          "fileName": "src/link-panel/LinkPanel.tsx",
          "name": "LinkPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/link-panel/LinkPanel.tsx",
            "name": "LinkPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/link-panel/LinkPanelDescription.tsx",
    "displayName": "LinkPanelDescription",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/link-panel/LinkPanelTitle.tsx",
    "displayName": "LinkPanelTitle",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/list/List.tsx",
    "displayName": "List",
    "props": {
      "as": {
        "defaultValue": {
          "value": "\"ul\""
        },
        "description": "HTML list element to render",
        "name": "as",
        "parent": {
          "fileName": "src/list/List.tsx",
          "name": "ListProps"
        },
        "declarations": [
          {
            "fileName": "src/list/List.tsx",
            "name": "ListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"ul\" | \"ol\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "List heading title",
        "name": "title",
        "parent": {
          "fileName": "src/list/List.tsx",
          "name": "ListProps"
        },
        "declarations": [
          {
            "fileName": "src/list/List.tsx",
            "name": "ListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "List heading description",
        "name": "description",
        "parent": {
          "fileName": "src/list/List.tsx",
          "name": "ListProps"
        },
        "declarations": [
          {
            "fileName": "src/list/List.tsx",
            "name": "ListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headingTag": {
        "defaultValue": {
          "value": "\"h3\""
        },
        "description": "Allows setting a different HTML h-tag",
        "name": "headingTag",
        "parent": {
          "fileName": "src/list/List.tsx",
          "name": "ListProps"
        },
        "declarations": [
          {
            "fileName": "src/list/List.tsx",
            "name": "ListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ElementType<any>"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding, height and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/list/List.tsx",
          "name": "ListProps"
        },
        "declarations": [
          {
            "fileName": "src/list/List.tsx",
            "name": "ListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "filePath": "src/list/ListItem.tsx",
    "displayName": "List.Item",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content for description of the list item",
        "name": "children",
        "parent": {
          "fileName": "src/list/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/list/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Title for the list item",
        "name": "title",
        "parent": {
          "fileName": "src/list/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/list/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "parent": {
          "fileName": "src/list/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/list/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLLIElement>"
        }
      }
    }
  },
  {
    "filePath": "src/loader/Loader.tsx",
    "displayName": "Loader",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes Loader width/height\n88px | 64px | 40px | 32px | 24px | 20px | 16px",
        "name": "size",
        "parent": {
          "fileName": "src/loader/Loader.tsx",
          "name": "LoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/loader/Loader.tsx",
            "name": "LoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"3xlarge\" | \"2xlarge\" | \"xlarge\" | \"large\" | \"medium\" | \"small\" | \"xsmall\""
        }
      },
      "title": {
        "defaultValue": {
          "value": "venter..."
        },
        "description": "Title prop on svg",
        "name": "title",
        "parent": {
          "fileName": "src/loader/Loader.tsx",
          "name": "LoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/loader/Loader.tsx",
            "name": "LoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "transparent": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Sets svg-background to transparent",
        "name": "transparent",
        "parent": {
          "fileName": "src/loader/Loader.tsx",
          "name": "LoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/loader/Loader.tsx",
            "name": "LoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "neutral"
        },
        "description": "Colored variants for Loader",
        "name": "variant",
        "parent": {
          "fileName": "src/loader/Loader.tsx",
          "name": "LoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/loader/Loader.tsx",
            "name": "LoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"neutral\" | \"interaction\" | \"inverted\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "ClassAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "ClassAttributes"
          },
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "((string | ((instance: SVGSVGElement | null) => void) | RefObject<SVGSVGElement>) & (((instance: SVGSVGElement | null) => void) | RefObject<...>)) | null"
        }
      }
    }
  },
  {
    "filePath": "src/modal/Modal.tsx",
    "displayName": "Modal",
    "props": {
      "header": {
        "defaultValue": null,
        "description": "Content for the header. Alteratively you can use <Modal.Header> instead for more control,\nbut then you have to set `aria-label` or `aria-labelledby` on the modal manually.",
        "name": "header",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ label?: string; icon?: ReactNode; heading: string; size?: \"medium\" | \"small\"; closeButton?: boolean | undefined; } | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Modal content",
        "name": "children",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Whether the modal should be visible or not.\nRemember to use the `onClose` callback to keep your local state in sync.\nYou can also use `ref.current.openModal()` and `ref.current.close()`.",
        "name": "open",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when the modal has been closed",
        "name": "onClose",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDialogElement>"
        }
      },
      "onBeforeClose": {
        "defaultValue": null,
        "description": "Called when the user wants to close the modal (clicked the close button or pressed Esc).\n@returns Whether to close the modal",
        "name": "onBeforeClose",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => boolean | void)"
        }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "Called when the user presses the Esc key, unless `onBeforeClose()` returns `false`.",
        "name": "onCancel",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDialogElement>"
        }
      },
      "width": {
        "defaultValue": {
          "value": "fit-content (up to 700px)"
        },
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"medium\" | \"small\" | `${number}${string}`"
        }
      },
      "portal": {
        "defaultValue": null,
        "description": "Lets you render the modal into a different part of the DOM.\nWill use `rootElement` from `Provider` if defined, otherwise `document.body`.",
        "name": "portal",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "User defined classname for modal",
        "name": "className",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Sets aria-labelledby on modal.\nNo need to set this manually if the `header` prop is used. A reference to `header.heading` will be created automatically.\n@warning If not using `header`, you should set either `aria-labelledby` or `aria-label`.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "src/modal/Modal.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/Modal.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDialogElement>"
        }
      }
    }
  },
  {
    "filePath": "src/modal/ModalBody.tsx",
    "displayName": "ModalBody",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/modal/ModalFooter.tsx",
    "displayName": "ModalFooter",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/modal/ModalHeader.tsx",
    "displayName": "ModalHeader",
    "props": {
      "closeButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Removes close-button (X) when false",
        "name": "closeButton",
        "parent": {
          "fileName": "src/modal/ModalHeader.tsx",
          "name": "ModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/modal/ModalHeader.tsx",
            "name": "ModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/pagination/Pagination.tsx",
    "displayName": "getSteps",
    "props": {
      "page": {
        "defaultValue": null,
        "description": "",
        "name": "page",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "boundaryCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "boundaryCount",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "siblingCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "siblingCount",
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "filePath": "src/pagination/Pagination.tsx",
    "displayName": "Pagination",
    "props": {
      "page": {
        "defaultValue": null,
        "description": "Current page\n@note Pagination indexing starts at 1",
        "name": "page",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "siblingCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Number of always visible pages before and after the current page.",
        "name": "siblingCount",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "boundaryCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Number of always visible pages at the beginning and end.",
        "name": "boundaryCount",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onPageChange": {
        "defaultValue": null,
        "description": "Callback when current page changes",
        "name": "onPageChange",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((page: number) => void)"
        }
      },
      "count": {
        "defaultValue": null,
        "description": "Total number of pages",
        "name": "count",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding, height and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\" | \"xsmall\""
        }
      },
      "prevNextTexts": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Display text alongside \"previous\" and \"next\" icons",
        "name": "prevNextTexts",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "renderItem": {
        "defaultValue": {
          "value": "(item: PaginationItemProps) => <PaginationItem {...item} />"
        },
        "description": "Override pagination item rendering",
        "name": "renderItem",
        "parent": {
          "fileName": "src/pagination/Pagination.tsx",
          "name": "PaginationProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/Pagination.tsx",
            "name": "PaginationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((item: PaginationItemProps) => ReactNode)"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLElement>"
        }
      }
    }
  },
  {
    "filePath": "src/pagination/PaginationItem.tsx",
    "displayName": "Item",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Button content",
        "name": "children",
        "parent": {
          "fileName": "src/pagination/PaginationItem.tsx",
          "name": "PaginationItemProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/PaginationItem.tsx",
            "name": "PaginationItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "selected": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Sets selected styling if true",
        "name": "selected",
        "parent": {
          "fileName": "src/pagination/PaginationItem.tsx",
          "name": "PaginationItemProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/PaginationItem.tsx",
            "name": "PaginationItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "page": {
        "defaultValue": null,
        "description": "The page the item represents",
        "name": "page",
        "parent": {
          "fileName": "src/pagination/PaginationItem.tsx",
          "name": "PaginationItemProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/PaginationItem.tsx",
            "name": "PaginationItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes padding, height and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/pagination/PaginationItem.tsx",
          "name": "PaginationItemProps"
        },
        "declarations": [
          {
            "fileName": "src/pagination/PaginationItem.tsx",
            "name": "PaginationItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\" | \"xsmall\""
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"primary\""
        },
        "description": "Changes design and interaction-visuals",
        "name": "variant",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"primary-neutral\" | \"secondary\" | \"secondary-neutral\" | \"tertiary\" | \"tertiary-neutral\" | \"danger\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Prevent the user from interacting with the button: it cannot be pressed or focused.\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Replaces button content with a Loader component, keeps width",
        "name": "loading",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Button Icon",
        "name": "icon",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconPosition": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Icon position in Button",
        "name": "iconPosition",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/panel/Panel.tsx",
    "displayName": "Panel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Panel content",
        "name": "children",
        "parent": {
          "fileName": "src/panel/Panel.tsx",
          "name": "PanelProps"
        },
        "declarations": [
          {
            "fileName": "src/panel/Panel.tsx",
            "name": "PanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "border": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Adds a border to panel when true",
        "name": "border",
        "parent": {
          "fileName": "src/panel/Panel.tsx",
          "name": "PanelProps"
        },
        "declarations": [
          {
            "fileName": "src/panel/Panel.tsx",
            "name": "PanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLElement>"
        }
      }
    }
  },
  {
    "filePath": "src/popover/Popover.tsx",
    "displayName": "Popover",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Popover content",
        "name": "children",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "anchorEl": {
        "defaultValue": null,
        "description": "Element popover anchors to",
        "name": "anchorEl",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Element | null"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Open state",
        "name": "open",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "onClose callback",
        "name": "onClose",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "\"top\""
        },
        "description": "Orientation for popover\n@note Try to keep general usage to \"top\", \"bottom\", \"left\", \"right\"",
        "name": "placement",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\" | \"right\" | \"left\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\""
        }
      },
      "arrow": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Adds a arrow from dialog to anchor when true",
        "name": "arrow",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "offset": {
        "defaultValue": {
          "value": "16 w/arrow, 4 w/no-arrow"
        },
        "description": "Distance from anchor to popover",
        "name": "offset",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strategy": {
        "defaultValue": {
          "value": "\"absolute\""
        },
        "description": "Changes what CSS position property to use\nYou want to use \"fixed\" if reference element is inside a fixed container, but popover is not",
        "name": "strategy",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"absolute\" | \"fixed\""
        }
      },
      "bubbleEscape": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Bubbles Escape keydown-event up trough DOM-tree. This is set to false by default to prevent closing components like Modal on Escape",
        "name": "bubbleEscape",
        "parent": {
          "fileName": "src/popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/popover/PopoverContent.tsx",
    "displayName": "PopoverContent",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/provider/Provider.tsx",
    "displayName": "Provider",
    "props": {
      "rootElement": {
        "defaultValue": null,
        "description": "",
        "name": "rootElement",
        "parent": {
          "fileName": "src/provider/Provider.tsx",
          "name": "ProviderProps"
        },
        "declarations": [
          {
            "fileName": "src/provider/Provider.tsx",
            "name": "ProviderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "HTMLElement"
        }
      }
    }
  },
  {
    "filePath": "src/read-more/ReadMore.tsx",
    "displayName": "ReadMore",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content inside ReadMore",
        "name": "children",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "ReadMore header content",
        "name": "header",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Opens component if 'true', closes if 'false'\nUsing this props removes automatic control of open-state",
        "name": "open",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Defaults the accordion to opened state",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Changes fontsize for content",
        "name": "size",
        "parent": {
          "fileName": "src/read-more/ReadMore.tsx",
          "name": "ReadMoreProps"
        },
        "declarations": [
          {
            "fileName": "src/read-more/ReadMore.tsx",
            "name": "ReadMoreProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/skeleton/Skeleton.tsx",
    "displayName": "Skeleton",
    "props": {
      "variant": {
        "defaultValue": {
          "value": "text"
        },
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "src/skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        },
        "declarations": [
          {
            "fileName": "src/skeleton/Skeleton.tsx",
            "name": "SkeletonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"circle\" | \"rectangle\" | \"rounded\" | \"text\""
        }
      },
      "height": {
        "defaultValue": null,
        "description": "When not inferring height from children, you must specify height",
        "name": "height",
        "parent": {
          "fileName": "src/skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        },
        "declarations": [
          {
            "fileName": "src/skeleton/Skeleton.tsx",
            "name": "SkeletonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "When not inferring width from children, you must specify width",
        "name": "width",
        "parent": {
          "fileName": "src/skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        },
        "declarations": [
          {
            "fileName": "src/skeleton/Skeleton.tsx",
            "name": "SkeletonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "as": {
        "defaultValue": {
          "value": "\"div\""
        },
        "description": "Overrides html-tag",
        "name": "as",
        "parent": {
          "fileName": "src/skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        },
        "declarations": [
          {
            "fileName": "src/skeleton/Skeleton.tsx",
            "name": "SkeletonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"div\" | \"span\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/stepper/Step.tsx",
    "displayName": "Step",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Text content by indicator",
        "name": "children",
        "parent": {
          "fileName": "src/stepper/Step.tsx",
          "name": "StepperStepProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Step.tsx",
            "name": "StepperStepProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "unsafe_index": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Handled by Stepper, overwriting may break component logic\n@private",
        "name": "unsafe_index",
        "parent": {
          "fileName": "src/stepper/Step.tsx",
          "name": "StepperStepProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Step.tsx",
            "name": "StepperStepProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "completed": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Makes step-indicator a checkmark",
        "name": "completed",
        "parent": {
          "fileName": "src/stepper/Step.tsx",
          "name": "StepperStepProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Step.tsx",
            "name": "StepperStepProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "interactive": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Makes step non-interactive if false. Step will be set to a <div>, overriding `as`-prop",
        "name": "interactive",
        "parent": {
          "fileName": "src/stepper/Step.tsx",
          "name": "StepperStepProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Step.tsx",
            "name": "StepperStepProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/stepper/Stepper.tsx",
    "displayName": "Stepper",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<Stepper.Step /> elements",
        "name": "children",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "orientation": {
        "defaultValue": {
          "value": "\"vertical\""
        },
        "description": "The direction the component grows.",
        "name": "orientation",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "activeStep": {
        "defaultValue": null,
        "description": "Current active step.\n@note Stepper index starts at 1, not 0",
        "name": "activeStep",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onStepChange": {
        "defaultValue": null,
        "description": "Callback for next activeStep\n@note Stepper index starts at 1, not 0",
        "name": "onStepChange",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((step: number) => void)"
        }
      },
      "interactive": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Makes stepper non-interactive if false",
        "name": "interactive",
        "parent": {
          "fileName": "src/stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLOListElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/Body.tsx",
    "displayName": "Body",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableSectionElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/ColumnHeader.tsx",
    "displayName": "ColumnHeader",
    "props": {
      "sortKey": {
        "defaultValue": null,
        "description": "Key to sort by",
        "name": "sortKey",
        "parent": {
          "fileName": "src/table/ColumnHeader.tsx",
          "name": "ColumnHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ColumnHeader.tsx",
            "name": "ColumnHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sortable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Column is sortable, adds indicators to show sorting",
        "name": "sortable",
        "parent": {
          "fileName": "src/table/ColumnHeader.tsx",
          "name": "ColumnHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ColumnHeader.tsx",
            "name": "ColumnHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "scope": {
        "defaultValue": null,
        "description": "",
        "name": "scope",
        "parent": {
          "fileName": "react/src/table/HeaderCell.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "react/src/table/HeaderCell.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "align": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Content alignment inside cell",
        "name": "align",
        "parent": {
          "fileName": "react/src/table/HeaderCell.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "react/src/table/HeaderCell.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"center\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableCellElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/DataCell.tsx",
    "displayName": "DataCell",
    "props": {
      "align": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Content alignment inside cell",
        "name": "align",
        "parent": {
          "fileName": "src/table/DataCell.tsx",
          "name": "DataCellProps"
        },
        "declarations": [
          {
            "fileName": "src/table/DataCell.tsx",
            "name": "DataCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"center\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableCellElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/ExpandableRow.tsx",
    "displayName": "ExpandableRow",
    "props": {
      "content": {
        "defaultValue": null,
        "description": "Content of the expanded row",
        "name": "content",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "togglePlacement": {
        "defaultValue": {
          "value": "left"
        },
        "description": "Placement of toggle button",
        "name": "togglePlacement",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Opens component if 'true', closes if 'false'\nUsing this props removes automatic control of open-state",
        "name": "open",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Opened state default",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onOpenChange": {
        "defaultValue": null,
        "description": "Change handler for open",
        "name": "onOpenChange",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((open: boolean) => void)"
        }
      },
      "expansionDisabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable expansion. shadeOnHover will not be visible.",
        "name": "expansionDisabled",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "expandOnRowClick": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Makes the whole row clickable",
        "name": "expandOnRowClick",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "colSpan": {
        "defaultValue": {
          "value": "999"
        },
        "description": "The width of the expanded row's internal cell",
        "name": "colSpan",
        "parent": {
          "fileName": "src/table/ExpandableRow.tsx",
          "name": "ExpandableRowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/ExpandableRow.tsx",
            "name": "ExpandableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "selected": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Row is selected",
        "name": "selected",
        "parent": {
          "fileName": "react/src/table/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "react/src/table/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shadeOnHover": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Shade the table row on hover.",
        "name": "shadeOnHover",
        "parent": {
          "fileName": "react/src/table/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "react/src/table/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableRowElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/Header.tsx",
    "displayName": "Header",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableSectionElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/HeaderCell.tsx",
    "displayName": "HeaderCell",
    "props": {
      "scope": {
        "defaultValue": null,
        "description": "",
        "name": "scope",
        "parent": {
          "fileName": "src/table/HeaderCell.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "src/table/HeaderCell.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "align": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Content alignment inside cell",
        "name": "align",
        "parent": {
          "fileName": "src/table/HeaderCell.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "src/table/HeaderCell.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"center\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableCellElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/Row.tsx",
    "displayName": "Row",
    "props": {
      "selected": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Row is selected",
        "name": "selected",
        "parent": {
          "fileName": "src/table/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shadeOnHover": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Shade the table row on hover.",
        "name": "shadeOnHover",
        "parent": {
          "fileName": "src/table/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableRowElement>"
        }
      }
    }
  },
  {
    "filePath": "src/table/Table.tsx",
    "displayName": "Table",
    "props": {
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding around Cells",
        "name": "size",
        "parent": {
          "fileName": "src/table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"large\" | \"medium\" | \"small\""
        }
      },
      "zebraStripes": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Zebra striped table",
        "name": "zebraStripes",
        "parent": {
          "fileName": "src/table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sort": {
        "defaultValue": null,
        "description": "Sort state",
        "name": "sort",
        "parent": {
          "fileName": "src/table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SortState"
        }
      },
      "onSortChange": {
        "defaultValue": null,
        "description": "Callback whens sort state changes",
        "name": "onSortChange",
        "parent": {
          "fileName": "src/table/Table.tsx",
          "name": "TableProps"
        },
        "declarations": [
          {
            "fileName": "src/table/Table.tsx",
            "name": "TableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((sortKey?: string) => void)"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTableElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tabs/Tab.tsx",
    "displayName": "Tab",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Tab label",
        "name": "label",
        "parent": {
          "fileName": "src/tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Tab Icon",
        "name": "icon",
        "parent": {
          "fileName": "src/tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for state-handling",
        "name": "value",
        "parent": {
          "fileName": "src/tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tabs/TabList.tsx",
    "displayName": "TabList",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<Tabs.Tab /> elements",
        "name": "children",
        "parent": {
          "fileName": "src/tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tabs/TabPanel.tsx",
    "displayName": "TabPanel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Tab panel content",
        "name": "children",
        "parent": {
          "fileName": "src/tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for state-handling",
        "name": "value",
        "parent": {
          "fileName": "src/tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tabs/Tabs.tsx",
    "displayName": "Tabs",
    "props": {
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "onChange callback for selected Tab",
        "name": "onChange",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string) => void)"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled selected value",
        "name": "value",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "If not controlled, a default-value needs to be set",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selectionFollowsFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Automatically activates tab on focus/navigation",
        "name": "selectionFollowsFocus",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loop": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Loops back to start when navigating past last item",
        "name": "loop",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "iconPosition": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Icon position in Tab",
        "name": "iconPosition",
        "parent": {
          "fileName": "src/tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"top\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tag/Tag.tsx",
    "displayName": "Tag",
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "Changes visual profile of tag",
        "name": "variant",
        "parent": {
          "fileName": "src/tag/Tag.tsx",
          "name": "TagProps"
        },
        "declarations": [
          {
            "fileName": "src/tag/Tag.tsx",
            "name": "TagProps"
          }
        ],
        "required": true,
        "type": {
          "name": "\"warning\" | \"warning-filled\" | \"warning-moderate\" | \"error\" | \"error-filled\" | \"error-moderate\" | \"info\" | \"info-filled\" | \"info-moderate\" | \"success\" | \"success-filled\" | ... 12 more ... | \"alt3-moderate\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/tag/Tag.tsx",
          "name": "TagProps"
        },
        "declarations": [
          {
            "fileName": "src/tag/Tag.tsx",
            "name": "TagProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\" | \"xsmall\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLSpanElement>"
        }
      }
    }
  },
  {
    "filePath": "src/timeline/AxisLabels.tsx",
    "displayName": "AxisLabels",
    "props": {
      "templates": {
        "defaultValue": null,
        "description": "",
        "name": "templates",
        "declarations": [
          {
            "fileName": "src/timeline/AxisLabels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "AxisLabelTemplates"
        }
      }
    }
  },
  {
    "filePath": "src/timeline/Pin.tsx",
    "displayName": "Pin",
    "props": {
      "date": {
        "defaultValue": null,
        "description": "Date position for the pin.",
        "name": "date",
        "parent": {
          "fileName": "src/timeline/Pin.tsx",
          "name": "TimelinePinProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/Pin.tsx",
            "name": "TimelinePinProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content in Pin Popover.",
        "name": "children",
        "parent": {
          "fileName": "src/timeline/Pin.tsx",
          "name": "TimelinePinProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/Pin.tsx",
            "name": "TimelinePinProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/timeline/Timeline.tsx",
    "displayName": "Timeline",
    "props": {
      "startDate": {
        "defaultValue": null,
        "description": "Decides startingpoint in timeline.\nDefaults to earliest date among the timeline periods.\n@note Using this disables use of ZoomButtons. You will need to control zooming yourself.",
        "name": "startDate",
        "parent": {
          "fileName": "src/timeline/Timeline.tsx",
          "name": "TimelineProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/Timeline.tsx",
            "name": "TimelineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "endDate": {
        "defaultValue": null,
        "description": "Decides end-date for timeline.\nDefaults to the latest date among the timeline periods.\n@note Using this disables use of ZoomButtons. You will need to control zooming yourself.",
        "name": "endDate",
        "parent": {
          "fileName": "src/timeline/Timeline.tsx",
          "name": "TimelineProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/Timeline.tsx",
            "name": "TimelineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Decides direction which periods are sorted/displayed. \"left\" ascends from earliest date on left.",
        "name": "direction",
        "parent": {
          "fileName": "src/timeline/Timeline.tsx",
          "name": "TimelineProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/Timeline.tsx",
            "name": "TimelineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "axisLabelTemplates": {
        "defaultValue": null,
        "description": "Templates for label texts. The templates are passed to the date-fns `format` function.\nDefaults to { day: \"dd.MM\", month: \"MMM yy\", year: \"yyyy\" }.",
        "name": "axisLabelTemplates",
        "parent": {
          "fileName": "src/timeline/Timeline.tsx",
          "name": "TimelineProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/Timeline.tsx",
            "name": "TimelineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AxisLabelTemplates"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "filePath": "src/timeline/TimelineRow.tsx",
    "displayName": "TimelineRow",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Label for the timeline row",
        "name": "label",
        "parent": {
          "fileName": "src/timeline/TimelineRow.tsx",
          "name": "TimelineRowProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/TimelineRow.tsx",
            "name": "TimelineRowProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "headingTag": {
        "defaultValue": {
          "value": "\"h3\""
        },
        "description": "Heading level for the label e.g h2, h3...",
        "name": "headingTag",
        "parent": {
          "fileName": "src/timeline/TimelineRow.tsx",
          "name": "TimelineRowProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/TimelineRow.tsx",
            "name": "TimelineRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\""
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon next to label",
        "name": "icon",
        "parent": {
          "fileName": "src/timeline/TimelineRow.tsx",
          "name": "TimelineRowProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/TimelineRow.tsx",
            "name": "TimelineRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLOListElement>"
        }
      }
    }
  },
  {
    "filePath": "src/toggle-group/ToggleGroup.tsx",
    "displayName": "ToggleGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Toggles.Item elements",
        "name": "children",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding and font-size",
        "name": "size",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled selected value",
        "name": "value",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "If not controlled, a default-value needs to be set",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback for selected toggle",
        "name": "onChange",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label describing ToggleGroup",
        "name": "label",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"action\""
        },
        "description": "Changes design and interaction-visuals",
        "name": "variant",
        "parent": {
          "fileName": "src/toggle-group/ToggleGroup.tsx",
          "name": "ToggleGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleGroup.tsx",
            "name": "ToggleGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"action\" | \"neutral\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/toggle-group/ToggleItem.tsx",
    "displayName": "ToggleItem",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content",
        "name": "children",
        "parent": {
          "fileName": "src/toggle-group/ToggleItem.tsx",
          "name": "ToggleItemProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleItem.tsx",
            "name": "ToggleItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for state-handling",
        "name": "value",
        "parent": {
          "fileName": "src/toggle-group/ToggleItem.tsx",
          "name": "ToggleItemProps"
        },
        "declarations": [
          {
            "fileName": "src/toggle-group/ToggleItem.tsx",
            "name": "ToggleItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/tooltip/Tooltip.tsx",
    "displayName": "Tooltip",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Element tooltip anchors to\n@note Needs to be React.ReactElement, does not support multiple children/react fragment",
        "name": "children",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> & RefAttributes<HTMLElement>"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Open state for contolled tooltip",
        "name": "open",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Tells tooltip to start in open state.\nUse sparingly synce hover/focus on other elements will close it\n@note \"open\"-prop overwrites this",
        "name": "defaultOpen",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "\"top\""
        },
        "description": "Orientation for tooltip",
        "name": "placement",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"right\" | \"bottom\" | \"left\""
        }
      },
      "arrow": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Toggles rendering of arrow",
        "name": "arrow",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "offset": {
        "defaultValue": {
          "value": "10px with arrow, 2px without arrow"
        },
        "description": "Distance from anchor to tooltip",
        "name": "offset",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "Text-content inside tooltip",
        "name": "content",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "maxChar": {
        "defaultValue": {
          "value": "80"
        },
        "description": "Sets max allowed character length.",
        "name": "maxChar",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "delay": {
        "defaultValue": {
          "value": "150"
        },
        "description": "Adds a delay in milliseconds before opening tooltip",
        "name": "delay",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "keys": {
        "defaultValue": null,
        "description": "List of Keyboard-keys for shortcuts",
        "name": "keys",
        "parent": {
          "fileName": "src/tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/BodyLong.tsx",
    "displayName": "BodyLong",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "large: 20px, medium: 18px, small: 16px",
        "name": "size",
        "parent": {
          "fileName": "src/typography/BodyLong.tsx",
          "name": "BodyLongProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyLong.tsx",
            "name": "BodyLongProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"large\" | \"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/BodyLong.tsx",
          "name": "BodyLongProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyLong.tsx",
            "name": "BodyLongProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "truncate": {
        "defaultValue": null,
        "description": "Truncate text overflow with ellipsis.",
        "name": "truncate",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "weight": {
        "defaultValue": {
          "value": "regular"
        },
        "description": "Adjusts font-weight.",
        "name": "weight",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"regular\" | \"semibold\""
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Adjust text-align.",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"center\" | \"end\""
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Visually hide text. Text will still be accessible for screenreaders",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds spacing below text",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "textColor": {
        "defaultValue": null,
        "description": "Adjusts color",
        "name": "textColor",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"subtle\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/BodyShort.tsx",
    "displayName": "BodyShort",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "large: 20px, medium: 18px, small: 16px",
        "name": "size",
        "parent": {
          "fileName": "src/typography/BodyShort.tsx",
          "name": "BodyShortProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyShort.tsx",
            "name": "BodyShortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"large\" | \"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Paragraph text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/BodyShort.tsx",
          "name": "BodyShortProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/BodyShort.tsx",
            "name": "BodyShortProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "truncate": {
        "defaultValue": null,
        "description": "Truncate text overflow with ellipsis.",
        "name": "truncate",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "weight": {
        "defaultValue": {
          "value": "regular"
        },
        "description": "Adjusts font-weight.",
        "name": "weight",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"regular\" | \"semibold\""
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Adjust text-align.",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"center\" | \"end\""
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Visually hide text. Text will still be accessible for screenreaders",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds spacing below text",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "textColor": {
        "defaultValue": null,
        "description": "Adjusts color",
        "name": "textColor",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"subtle\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/Detail.tsx",
    "displayName": "Detail",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "@deprecated Medium === small",
        "name": "size",
        "parent": {
          "fileName": "src/typography/Detail.tsx",
          "name": "DetailProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Detail.tsx",
            "name": "DetailProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Paragraph text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/Detail.tsx",
          "name": "DetailProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Detail.tsx",
            "name": "DetailProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "uppercase": {
        "defaultValue": null,
        "description": "All caps",
        "name": "uppercase",
        "parent": {
          "fileName": "src/typography/Detail.tsx",
          "name": "DetailProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Detail.tsx",
            "name": "DetailProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "truncate": {
        "defaultValue": null,
        "description": "Truncate text overflow with ellipsis.",
        "name": "truncate",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "weight": {
        "defaultValue": {
          "value": "regular"
        },
        "description": "Adjusts font-weight.",
        "name": "weight",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"regular\" | \"semibold\""
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Adjust text-align.",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"center\" | \"end\""
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Visually hide text. Text will still be accessible for screenreaders",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds spacing below text",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "textColor": {
        "defaultValue": null,
        "description": "Adjusts color",
        "name": "textColor",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"subtle\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/ErrorMessage.tsx",
    "displayName": "ErrorMessage",
    "props": {
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "medium: 18px, small: 16px",
        "name": "size",
        "parent": {
          "fileName": "src/typography/ErrorMessage.tsx",
          "name": "ErrorMessageProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/ErrorMessage.tsx",
            "name": "ErrorMessageProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Error text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/ErrorMessage.tsx",
          "name": "ErrorMessageProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/ErrorMessage.tsx",
            "name": "ErrorMessageProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds spacing below text",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/Heading.tsx",
    "displayName": "Heading",
    "props": {
      "level": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Heading level",
        "name": "level",
        "parent": {
          "fileName": "src/typography/Heading.tsx",
          "name": "HeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Heading.tsx",
            "name": "HeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes text-sizing",
        "name": "size",
        "parent": {
          "fileName": "src/typography/Heading.tsx",
          "name": "HeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Heading.tsx",
            "name": "HeadingProps"
          }
        ],
        "required": true,
        "type": {
          "name": "\"xlarge\" | \"large\" | \"medium\" | \"small\" | \"xsmall\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Heading text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/Heading.tsx",
          "name": "HeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Heading.tsx",
            "name": "HeadingProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds spacing below text",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Visually hide text. Text will still be accessible for screenreaders",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Adjust text-align.",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"center\" | \"end\""
        }
      },
      "textColor": {
        "defaultValue": null,
        "description": "Adjusts color",
        "name": "textColor",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"subtle\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLHeadingElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/Ingress.tsx",
    "displayName": "Ingress",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Ingress text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/Ingress.tsx",
          "name": "IngressProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Ingress.tsx",
            "name": "IngressProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds margin-bottom",
        "name": "spacing",
        "parent": {
          "fileName": "src/typography/Ingress.tsx",
          "name": "IngressProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Ingress.tsx",
            "name": "IngressProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLParagraphElement>"
        }
      }
    }
  },
  {
    "filePath": "src/typography/Label.tsx",
    "displayName": "Label",
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "medium: 18px, small: 16px",
        "name": "size",
        "parent": {
          "fileName": "src/typography/Label.tsx",
          "name": "LabelProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Label.tsx",
            "name": "LabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Paragraph text",
        "name": "children",
        "parent": {
          "fileName": "src/typography/Label.tsx",
          "name": "LabelProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Label.tsx",
            "name": "LabelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Visually hide text. Text will still be accessible for screenreaders",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "Adds spacing below text",
        "name": "spacing",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "textColor": {
        "defaultValue": null,
        "description": "Adjusts color",
        "name": "textColor",
        "declarations": [
          {
            "fileName": "react/src/typography/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"subtle\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLLabelElement>"
        }
      }
    }
  },
  {
    "filePath": "src/util/AnimateHeight.tsx",
    "displayName": "AnimateHeight",
    "props": {
      "duration": {
        "defaultValue": {
          "value": "250ms"
        },
        "description": "",
        "name": "duration",
        "parent": {
          "fileName": "src/util/AnimateHeight.tsx",
          "name": "AnimateHeightProps"
        },
        "declarations": [
          {
            "fileName": "src/util/AnimateHeight.tsx",
            "name": "AnimateHeightProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "easing": {
        "defaultValue": {
          "value": "ease"
        },
        "description": "",
        "name": "easing",
        "parent": {
          "fileName": "src/util/AnimateHeight.tsx",
          "name": "AnimateHeightProps"
        },
        "declarations": [
          {
            "fileName": "src/util/AnimateHeight.tsx",
            "name": "AnimateHeightProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/util/AnimateHeight.tsx",
          "name": "AnimateHeightProps"
        },
        "declarations": [
          {
            "fileName": "src/util/AnimateHeight.tsx",
            "name": "AnimateHeightProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Height"
        }
      },
      "innerClassName": {
        "defaultValue": null,
        "description": "",
        "name": "innerClassName",
        "parent": {
          "fileName": "src/util/AnimateHeight.tsx",
          "name": "AnimateHeightProps"
        },
        "declarations": [
          {
            "fileName": "src/util/AnimateHeight.tsx",
            "name": "AnimateHeightProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "filePath": "src/util/Slot.tsx",
    "displayName": "Slot",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLElement>"
        }
      }
    }
  },
  {
    "filePath": "src/util/TextareaAutoSize.tsx",
    "displayName": "TextareaAutoSize",
    "props": {
      "maxRows": {
        "defaultValue": null,
        "description": "Maximum number of rows to display.",
        "name": "maxRows",
        "parent": {
          "fileName": "src/util/TextareaAutoSize.tsx",
          "name": "TextareaAutosizeProps"
        },
        "declarations": [
          {
            "fileName": "src/util/TextareaAutoSize.tsx",
            "name": "TextareaAutosizeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minRows": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Minimum number of rows to display.",
        "name": "minRows",
        "parent": {
          "fileName": "src/util/TextareaAutoSize.tsx",
          "name": "TextareaAutosizeProps"
        },
        "declarations": [
          {
            "fileName": "src/util/TextareaAutoSize.tsx",
            "name": "TextareaAutosizeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLTextAreaElement>"
        }
      }
    }
  },
  {
    "filePath": "src/util/mergeRefs.tsx",
    "displayName": "mergeRefs",
    "props": {}
  },
  {
    "filePath": "src/date/context/useSharedMonthContext.tsx",
    "displayName": "SharedMonthProvider",
    "props": {
      "dropdownCaption": {
        "defaultValue": null,
        "description": "",
        "name": "dropdownCaption",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "",
        "name": "selected",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "",
        "name": "onSelect",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "year": {
        "defaultValue": null,
        "description": "",
        "name": "year",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "onYearChange": {
        "defaultValue": null,
        "description": "",
        "name": "onYearChange",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "filePath": "src/date/datepicker/DatePicker.tsx",
    "displayName": "DatePicker",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Element datepicker anchors to. Use <DatePicker.Input /> for built-in toggle, or make your own with the open/onClose props",
        "name": "children",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classname for datepicker in popover",
        "name": "className",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "wrapperClassName": {
        "defaultValue": null,
        "description": "Classname for wrapper",
        "name": "wrapperClassName",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "locale": {
        "defaultValue": {
          "value": "\"nb\" (norsk bokmål)"
        },
        "description": "Changes datepicker locale",
        "name": "locale",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"nb\" | \"nn\" | \"en\""
        }
      },
      "fromDate": {
        "defaultValue": null,
        "description": "The earliest day to start navigation.",
        "name": "fromDate",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toDate": {
        "defaultValue": null,
        "description": "The latests day to end navigation.",
        "name": "toDate",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "dropdownCaption": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Display dropdown for choosing the month and the year. Needs `fromDate` + `toDate` to work.",
        "name": "dropdownCaption",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply the disabled modifier to the matching days.\nhttps://react-day-picker.js.org/api/types/Matcher",
        "name": "disabled",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Matcher[]"
        }
      },
      "disableWeekends": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable saturday and sunday.",
        "name": "disableWeekends",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showWeekNumber": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Shows week numbers in left-column. Use with caution, takes up valuable screenspace for small screens.",
        "name": "showWeekNumber",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Open state for user-controlled state. Component controlled by default",
        "name": "open",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "onClose callback for user-controlled state",
        "name": "onClose",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        }
      },
      "onOpenToggle": {
        "defaultValue": null,
        "description": "onOpenToggle callback for user-controlled state. Only called if `<DatePicker.Input />` is used",
        "name": "onOpenToggle",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        }
      },
      "strategy": {
        "defaultValue": {
          "value": "See Popover"
        },
        "description": "Avoid using if possible!\nChanges what CSS position property to use.\nYou want to use \"fixed\" if parent wrapper has position relative, but you want popover to escape",
        "name": "strategy",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"absolute\" | \"fixed\""
        }
      },
      "bubbleEscape": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Bubbles Escape keydown-event up trough DOM-tree. This is set to false by default to prevent closing components like Modal on Escape",
        "name": "bubbleEscape",
        "parent": {
          "fileName": "src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "mode": {
        "defaultValue": null,
        "description": "",
        "name": "mode",
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"single\" | \"multiple\" | \"range\""
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "",
        "name": "onSelect",
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "((val?: Date) => void) | ((val?: Date[]) => void) | ((val?: DateRange | undefined) => void) | undefined"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "",
        "name": "selected",
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | Date[] | DateRange"
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "",
        "name": "defaultSelected",
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | Date[] | DateRange"
        }
      },
      "onWeekNumberClick": {
        "defaultValue": null,
        "description": "Allows selecting a week at a time. Only used with mode=\"multiple\".",
        "name": "onWeekNumberClick",
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "WeekNumberClickEventHandler"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "",
        "name": "min",
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "",
        "name": "max",
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "filePath": "src/date/datepicker/DatePickerStandalone.tsx",
    "displayName": "DatePickerStandalone",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Datepicker classname",
        "name": "className",
        "parent": {
          "fileName": "src/date/datepicker/DatePickerStandalone.tsx",
          "name": "DatePickerStandaloneDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePickerStandalone.tsx",
            "name": "DatePickerStandaloneDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fixedWeeks": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If datepicker should be fixed to 6 weeks, regardless of actual weeks in month",
        "name": "fixedWeeks",
        "parent": {
          "fileName": "src/date/datepicker/DatePickerStandalone.tsx",
          "name": "DatePickerStandaloneDefaultProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/DatePickerStandalone.tsx",
            "name": "DatePickerStandaloneDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Element datepicker anchors to. Use <DatePicker.Input /> for built-in toggle, or make your own with the open/onClose props",
        "name": "children",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "locale": {
        "defaultValue": {
          "value": "nb"
        },
        "description": "Changes datepicker locale",
        "name": "locale",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"nb\" | \"nn\" | \"en\""
        }
      },
      "fromDate": {
        "defaultValue": null,
        "description": "The earliest day to start navigation.",
        "name": "fromDate",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toDate": {
        "defaultValue": null,
        "description": "The latests day to end navigation.",
        "name": "toDate",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "dropdownCaption": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Display dropdown for choosing the month and the year. Needs `fromDate` + `toDate` to work.",
        "name": "dropdownCaption",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Apply the disabled modifier to the matching days.\nhttps://react-day-picker.js.org/api/types/Matcher",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Matcher[]"
        }
      },
      "disableWeekends": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable saturday and sunday.",
        "name": "disableWeekends",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showWeekNumber": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Shows week numbers in left-column. Use with caution, takes up valuable screenspace for small screens.",
        "name": "showWeekNumber",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "bubbleEscape": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Bubbles Escape keydown-event up trough DOM-tree. This is set to false by default to prevent closing components like Modal on Escape",
        "name": "bubbleEscape",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "mode": {
        "defaultValue": null,
        "description": "",
        "name": "mode",
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"single\" | \"multiple\" | \"range\""
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "",
        "name": "onSelect",
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "((val?: Date) => void) | ((val?: Date[]) => void) | ((val?: DateRange | undefined) => void) | undefined"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | Date[] | DateRange"
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "",
        "name": "defaultSelected",
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | Date[] | DateRange"
        }
      },
      "onWeekNumberClick": {
        "defaultValue": null,
        "description": "Allows selecting a week at a time. Only used with mode=\"multiple\".",
        "name": "onWeekNumberClick",
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "WeekNumberClickEventHandler"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "",
        "name": "min",
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "",
        "name": "max",
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "filePath": "src/date/hooks/useDatepicker.tsx",
    "displayName": "useDatepicker",
    "props": {
      "defaultSelected": {
        "defaultValue": null,
        "description": "The initially selected Date",
        "name": "defaultSelected",
        "parent": {
          "fileName": "src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "defaultMonth": {
        "defaultValue": null,
        "description": "Default shown month",
        "name": "defaultMonth",
        "parent": {
          "fileName": "src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Make selection of Date required",
        "name": "required",
        "parent": {
          "fileName": "src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Callback for changed state",
        "name": "onDateChange",
        "parent": {
          "fileName": "src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "((val?: Date) => void)"
        }
      },
      "inputFormat": {
        "defaultValue": {
          "value": "\"dd.MM.yyyy\""
        },
        "description": "Input-format",
        "name": "inputFormat",
        "parent": {
          "fileName": "src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onValidate": {
        "defaultValue": null,
        "description": "validation-callback",
        "name": "onValidate",
        "parent": {
          "fileName": "src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "((val: DateValidationT) => void)"
        }
      },
      "allowTwoDigitYear": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Allows input of with 'yy' year format.\n@Note Decision between 20th and 21st century is based on before(todays year - 80) ? 21st : 20th.\nIn 2023 this equals to 1943 - 2042",
        "name": "allowTwoDigitYear",
        "parent": {
          "fileName": "src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "openOnFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Opens datepicker on input-focus",
        "name": "openOnFocus",
        "parent": {
          "fileName": "src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "locale": {
        "defaultValue": {
          "value": "\"nb\" (norsk bokmål)"
        },
        "description": "Changes datepicker locale",
        "name": "locale",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"nb\" | \"nn\" | \"en\""
        }
      },
      "fromDate": {
        "defaultValue": null,
        "description": "The earliest day to start navigation.",
        "name": "fromDate",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toDate": {
        "defaultValue": null,
        "description": "The latests day to end navigation.",
        "name": "toDate",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply the disabled modifier to the matching days.\nhttps://react-day-picker.js.org/api/types/Matcher",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Matcher[]"
        }
      },
      "disableWeekends": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable saturday and sunday.",
        "name": "disableWeekends",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "filePath": "src/date/hooks/useMonthPicker.tsx",
    "displayName": "useMonthpicker",
    "props": {
      "required": {
        "defaultValue": null,
        "description": "Make Date-selection required",
        "name": "required",
        "parent": {
          "fileName": "src/date/hooks/useMonthPicker.tsx",
          "name": "UseMonthPickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useMonthPicker.tsx",
            "name": "UseMonthPickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onMonthChange": {
        "defaultValue": null,
        "description": "Callback for month-change",
        "name": "onMonthChange",
        "parent": {
          "fileName": "src/date/hooks/useMonthPicker.tsx",
          "name": "UseMonthPickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useMonthPicker.tsx",
            "name": "UseMonthPickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "((date?: Date) => void)"
        }
      },
      "inputFormat": {
        "defaultValue": {
          "value": "\"MMMM yyyy\""
        },
        "description": "Input-format",
        "name": "inputFormat",
        "parent": {
          "fileName": "src/date/hooks/useMonthPicker.tsx",
          "name": "UseMonthPickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useMonthPicker.tsx",
            "name": "UseMonthPickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onValidate": {
        "defaultValue": null,
        "description": "validation-callback",
        "name": "onValidate",
        "parent": {
          "fileName": "src/date/hooks/useMonthPicker.tsx",
          "name": "UseMonthPickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useMonthPicker.tsx",
            "name": "UseMonthPickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "((val: MonthValidationT) => void)"
        }
      },
      "defaultYear": {
        "defaultValue": null,
        "description": "Default shown year",
        "name": "defaultYear",
        "parent": {
          "fileName": "src/date/hooks/useMonthPicker.tsx",
          "name": "UseMonthPickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useMonthPicker.tsx",
            "name": "UseMonthPickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "allowTwoDigitYear": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Allows input of with 'yy' year format.\n@Note Decision between 20th and 21st century is based on before(todays year - 80) ? 21st : 20th.\nIn 2023 this equals to 1943 - 2042",
        "name": "allowTwoDigitYear",
        "parent": {
          "fileName": "src/date/hooks/useMonthPicker.tsx",
          "name": "UseMonthPickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useMonthPicker.tsx",
            "name": "UseMonthPickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "openOnFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Opens datepicker on input-focus",
        "name": "openOnFocus",
        "parent": {
          "fileName": "src/date/hooks/useMonthPicker.tsx",
          "name": "UseMonthPickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useMonthPicker.tsx",
            "name": "UseMonthPickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "locale": {
        "defaultValue": {
          "value": "\"nb\" (norsk bokmål)"
        },
        "description": "Changes monthpicker locale",
        "name": "locale",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"nb\" | \"nn\" | \"en\""
        }
      },
      "fromDate": {
        "defaultValue": null,
        "description": "The earliest month to start navigation.",
        "name": "fromDate",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toDate": {
        "defaultValue": null,
        "description": "The latest day to end  navigation.",
        "name": "toDate",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply the disabled modifier to the matching months. Uses a subset of React Day Picker Matcher type. https://react-day-picker.js.org/api/types/Matcher",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Matcher[]"
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "Default selected month.",
        "name": "defaultSelected",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      }
    }
  },
  {
    "filePath": "src/date/hooks/useRangeDatepicker.tsx",
    "displayName": "useRangeDatepicker",
    "props": {
      "defaultSelected": {
        "defaultValue": null,
        "description": "The initially selected DateRange",
        "name": "defaultSelected",
        "parent": {
          "fileName": "src/date/hooks/useRangeDatepicker.tsx",
          "name": "UseRangeDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useRangeDatepicker.tsx",
            "name": "UseRangeDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "DateRange"
        }
      },
      "onRangeChange": {
        "defaultValue": null,
        "description": "Callback for changed state",
        "name": "onRangeChange",
        "parent": {
          "fileName": "src/date/hooks/useRangeDatepicker.tsx",
          "name": "UseRangeDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useRangeDatepicker.tsx",
            "name": "UseRangeDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "((val?: DateRange) => void)"
        }
      },
      "onValidate": {
        "defaultValue": null,
        "description": "validation-callback",
        "name": "onValidate",
        "parent": {
          "fileName": "src/date/hooks/useRangeDatepicker.tsx",
          "name": "UseRangeDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "src/date/hooks/useRangeDatepicker.tsx",
            "name": "UseRangeDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "((val: RangeValidationT) => void)"
        }
      },
      "locale": {
        "defaultValue": {
          "value": "\"nb\" (norsk bokmål)"
        },
        "description": "Changes datepicker locale",
        "name": "locale",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"nb\" | \"nn\" | \"en\""
        }
      },
      "fromDate": {
        "defaultValue": null,
        "description": "The earliest day to start navigation.",
        "name": "fromDate",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toDate": {
        "defaultValue": null,
        "description": "The latests day to end navigation.",
        "name": "toDate",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply the disabled modifier to the matching days.\nhttps://react-day-picker.js.org/api/types/Matcher",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Matcher[]"
        }
      },
      "disableWeekends": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable saturday and sunday.",
        "name": "disableWeekends",
        "parent": {
          "fileName": "react/src/date/datepicker/DatePicker.tsx",
          "name": "DatePickerDefaultProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/datepicker/DatePicker.tsx",
            "name": "DatePickerDefaultProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultMonth": {
        "defaultValue": null,
        "description": "Default shown month",
        "name": "defaultMonth",
        "parent": {
          "fileName": "react/src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "react/src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Make selection of Date required",
        "name": "required",
        "parent": {
          "fileName": "react/src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "react/src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inputFormat": {
        "defaultValue": {
          "value": "\"dd.MM.yyyy\""
        },
        "description": "Input-format",
        "name": "inputFormat",
        "parent": {
          "fileName": "react/src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "react/src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowTwoDigitYear": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Allows input of with 'yy' year format.\n@Note Decision between 20th and 21st century is based on before(todays year - 80) ? 21st : 20th.\nIn 2023 this equals to 1943 - 2042",
        "name": "allowTwoDigitYear",
        "parent": {
          "fileName": "react/src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "react/src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "openOnFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Opens datepicker on input-focus",
        "name": "openOnFocus",
        "parent": {
          "fileName": "react/src/date/hooks/useDatepicker.tsx",
          "name": "UseDatepickerOptions"
        },
        "declarations": [
          {
            "fileName": "react/src/date/hooks/useDatepicker.tsx",
            "name": "UseDatepickerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "filePath": "src/date/monthpicker/MonthButton.tsx",
    "displayName": "MonthButton",
    "props": {
      "month": {
        "defaultValue": null,
        "description": "",
        "name": "month",
        "parent": {
          "fileName": "src/date/monthpicker/MonthButton.tsx",
          "name": "MonthType"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthButton.tsx",
            "name": "MonthType"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "months": {
        "defaultValue": null,
        "description": "",
        "name": "months",
        "parent": {
          "fileName": "src/date/monthpicker/MonthButton.tsx",
          "name": "MonthType"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthButton.tsx",
            "name": "MonthType"
          }
        ],
        "required": true,
        "type": {
          "name": "Date[]"
        }
      },
      "focus": {
        "defaultValue": null,
        "description": "",
        "name": "focus",
        "parent": {
          "fileName": "src/date/monthpicker/MonthButton.tsx",
          "name": "MonthType"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthButton.tsx",
            "name": "MonthType"
          }
        ],
        "required": true,
        "type": {
          "name": "Date | undefined"
        }
      },
      "setFocus": {
        "defaultValue": null,
        "description": "",
        "name": "setFocus",
        "parent": {
          "fileName": "src/date/monthpicker/MonthButton.tsx",
          "name": "MonthType"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthButton.tsx",
            "name": "MonthType"
          }
        ],
        "required": true,
        "type": {
          "name": "(date?: Date | undefined) => void"
        }
      },
      "tabRoot": {
        "defaultValue": null,
        "description": "",
        "name": "tabRoot",
        "parent": {
          "fileName": "src/date/monthpicker/MonthButton.tsx",
          "name": "MonthType"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthButton.tsx",
            "name": "MonthType"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "setTabRoot": {
        "defaultValue": null,
        "description": "",
        "name": "setTabRoot",
        "parent": {
          "fileName": "src/date/monthpicker/MonthButton.tsx",
          "name": "MonthType"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthButton.tsx",
            "name": "MonthType"
          }
        ],
        "required": true,
        "type": {
          "name": "(date?: Date | undefined) => void"
        }
      }
    }
  },
  {
    "filePath": "src/date/monthpicker/MonthPicker.tsx",
    "displayName": "MonthPicker",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Element monthpicker anchors to. Use <MonthPicker.Input /> for built-in toggle,\nor make your own with the open/onClose props",
        "name": "children",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classname for datepicker in popover",
        "name": "className",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "wrapperClassName": {
        "defaultValue": null,
        "description": "Classname for wrapper",
        "name": "wrapperClassName",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fromDate": {
        "defaultValue": null,
        "description": "The earliest month to start navigation.",
        "name": "fromDate",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toDate": {
        "defaultValue": null,
        "description": "The latest day to end  navigation.",
        "name": "toDate",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "locale": {
        "defaultValue": {
          "value": "\"nb\" (norsk bokmål)"
        },
        "description": "Changes monthpicker locale",
        "name": "locale",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"nb\" | \"nn\" | \"en\""
        }
      },
      "dropdownCaption": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Display dropdown for choosing year. Needs `fromDate` + `toDate` to work.",
        "name": "dropdownCaption",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply the disabled modifier to the matching months. Uses a subset of React Day Picker Matcher type. https://react-day-picker.js.org/api/types/Matcher",
        "name": "disabled",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Matcher[]"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Controlled selected-month",
        "name": "selected",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "Default selected month.",
        "name": "defaultSelected",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Open state for user-controlled state. Component controlled by default",
        "name": "open",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "onClose callback for user-controlled state",
        "name": "onClose",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        }
      },
      "onOpenToggle": {
        "defaultValue": null,
        "description": "onOpenToggle callback for user-controlled-state. Only called if `<MonthPicker.Input />` is used",
        "name": "onOpenToggle",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        }
      },
      "onMonthSelect": {
        "defaultValue": null,
        "description": "Callback for user-controlled state",
        "name": "onMonthSelect",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((month?: Date) => void)"
        }
      },
      "year": {
        "defaultValue": null,
        "description": "Used to set visible year programmatically. Component controlled by default",
        "name": "year",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "onYearChange": {
        "defaultValue": null,
        "description": "Event fired when the user navigates between years.",
        "name": "onYearChange",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((y?: Date) => void)"
        }
      },
      "strategy": {
        "defaultValue": {
          "value": "\"absolute\""
        },
        "description": "Avoid using if possible!\nChanges what CSS position property to use\nYou want to use \"fixed\" if parent wrapper has position relative, but you want popover to escape",
        "name": "strategy",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"absolute\" | \"fixed\""
        }
      },
      "bubbleEscape": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Bubbles Escape keydown-event up trough DOM-tree. This is set to false by default to prevent closing components like Modal on Escape",
        "name": "bubbleEscape",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "filePath": "src/date/monthpicker/MonthPickerStandalone.tsx",
    "displayName": "MonthPickerStandalone",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Monthpicker classname",
        "name": "className",
        "parent": {
          "fileName": "src/date/monthpicker/MonthPickerStandalone.tsx",
          "name": "MonthPickerStandaloneProps"
        },
        "declarations": [
          {
            "fileName": "src/date/monthpicker/MonthPickerStandalone.tsx",
            "name": "MonthPickerStandaloneProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dropdownCaption": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Display dropdown for choosing year. Needs `fromDate` + `toDate` to work.",
        "name": "dropdownCaption",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Element monthpicker anchors to. Use <MonthPicker.Input /> for built-in toggle,\nor make your own with the open/onClose props",
        "name": "children",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "fromDate": {
        "defaultValue": null,
        "description": "The earliest month to start navigation.",
        "name": "fromDate",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "toDate": {
        "defaultValue": null,
        "description": "The latest day to end  navigation.",
        "name": "toDate",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "locale": {
        "defaultValue": {
          "value": "nb"
        },
        "description": "Changes monthpicker locale",
        "name": "locale",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"nb\" | \"nn\" | \"en\""
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Apply the disabled modifier to the matching months. Uses a subset of React Day Picker Matcher type. https://react-day-picker.js.org/api/types/Matcher",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Matcher[]"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Controlled selected-month",
        "name": "selected",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "Default selected month.",
        "name": "defaultSelected",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "onMonthSelect": {
        "defaultValue": null,
        "description": "Callback for user-controlled state",
        "name": "onMonthSelect",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((month?: Date) => void)"
        }
      },
      "year": {
        "defaultValue": null,
        "description": "Used to set visible year programmatically. Component controlled by default",
        "name": "year",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "onYearChange": {
        "defaultValue": null,
        "description": "Event fired when the user navigates between years.",
        "name": "onYearChange",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((y?: Date) => void)"
        }
      },
      "bubbleEscape": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Bubbles Escape keydown-event up trough DOM-tree. This is set to false by default to prevent closing components like Modal on Escape",
        "name": "bubbleEscape",
        "parent": {
          "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
          "name": "MonthPickerProps"
        },
        "declarations": [
          {
            "fileName": "react/src/date/monthpicker/MonthPicker.tsx",
            "name": "MonthPickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Menu/Divider.tsx",
    "displayName": "Divider",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLHRElement>"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Menu/index.tsx",
    "displayName": "Menu",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Dropdown content",
        "name": "children",
        "parent": {
          "fileName": "src/dropdown/Menu/index.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/index.tsx",
            "name": "MenuProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "onClose callback",
        "name": "onClose",
        "parent": {
          "fileName": "src/dropdown/Menu/index.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/index.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => void)"
        }
      },
      "strategy": {
        "defaultValue": {
          "value": "\"absolute\""
        },
        "description": "Popover positionion strategy",
        "name": "strategy",
        "parent": {
          "fileName": "src/dropdown/Menu/index.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/index.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"fixed\" | \"absolute\""
        }
      },
      "placement": {
        "defaultValue": null,
        "description": "",
        "name": "placement",
        "parent": {
          "fileName": "src/dropdown/Menu/index.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/index.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\" | \"right\" | \"left\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/Fieldset/Fieldset.tsx",
    "displayName": "Fieldset",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "FormFields in Fieldset",
        "name": "children",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "legend": {
        "defaultValue": null,
        "description": "Fieldset legend",
        "name": "legend",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLegend": {
        "defaultValue": null,
        "description": "If enabled shows the legend and description for screenreaders only",
        "name": "hideLegend",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "errorPropagation": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Toggles error propagation to child-elements",
        "name": "errorPropagation",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "nativeReadOnly": {
        "defaultValue": null,
        "description": "",
        "name": "nativeReadOnly",
        "parent": {
          "fileName": "src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLFieldSetElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/checkbox/Checkbox.tsx",
    "displayName": "Checkbox",
    "props": {
      "error": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Adds error indication on checkbox",
        "name": "error",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Id for error resulting in checkbox having error",
        "name": "errorId",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Checkbox label",
        "name": "children",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "Hides label and makes it viewable for screen-readers only.",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the HTML element.",
        "name": "value",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "indeterminate": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Specify whether the Checkbox is in an indeterminate state",
        "name": "indeterminate",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of Checkbox",
        "name": "description",
        "parent": {
          "fileName": "src/form/checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/checkbox/CheckboxGroup.tsx",
    "displayName": "CheckboxGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Collection of <Checkbox/>",
        "name": "children",
        "parent": {
          "fileName": "src/form/checkbox/CheckboxGroup.tsx",
          "name": "CheckboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/CheckboxGroup.tsx",
            "name": "CheckboxGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled state for checkboxes.",
        "name": "value",
        "parent": {
          "fileName": "src/form/checkbox/CheckboxGroup.tsx",
          "name": "CheckboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/CheckboxGroup.tsx",
            "name": "CheckboxGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default checked checkboxes on render",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/form/checkbox/CheckboxGroup.tsx",
          "name": "CheckboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/CheckboxGroup.tsx",
            "name": "CheckboxGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "onChange": {
        "defaultValue": {
          "value": "() => {}"
        },
        "description": "Returns current checked checkboxes in group",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/checkbox/CheckboxGroup.tsx",
          "name": "CheckboxGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/checkbox/CheckboxGroup.tsx",
            "name": "CheckboxGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: any[]) => void)"
        }
      },
      "legend": {
        "defaultValue": null,
        "description": "Fieldset legend",
        "name": "legend",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLegend": {
        "defaultValue": null,
        "description": "If enabled shows the legend and description for screenreaders only",
        "name": "hideLegend",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "nativeReadOnly": {
        "defaultValue": null,
        "description": "",
        "name": "nativeReadOnly",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLFieldSetElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/ClearButton.tsx",
    "displayName": "ClearButton",
    "props": {
      "handleClear": {
        "defaultValue": null,
        "description": "",
        "name": "handleClear",
        "parent": {
          "fileName": "src/form/combobox/ClearButton.tsx",
          "name": "ClearButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/form/combobox/ClearButton.tsx",
            "name": "ClearButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "clearButtonLabel": {
        "defaultValue": null,
        "description": "",
        "name": "clearButtonLabel",
        "parent": {
          "fileName": "src/form/combobox/ClearButton.tsx",
          "name": "ClearButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/form/combobox/ClearButton.tsx",
            "name": "ClearButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/Combobox.tsx",
    "displayName": "Combobox",
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Combobox label",
        "name": "label",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "allowNewValues": {
        "defaultValue": null,
        "description": "If enabled, adds an option to add the value of the input as an option whenever there are no options matching the value.",
        "name": "allowNewValues",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearButton": {
        "defaultValue": null,
        "description": "If \"true\" adds a button to clear the value in the input field",
        "name": "clearButton",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearButtonLabel": {
        "defaultValue": {
          "value": "\"Tøm\""
        },
        "description": "Custom name for the clear button. Requires \"clearButton\" to be \"true\".",
        "name": "clearButtonLabel",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "filteredOptions": {
        "defaultValue": null,
        "description": "A list of options to display in the dropdown list.\nIf provided, this overrides the internal search logic in the component.\nUseful for e.g. searching on a server or when overriding the search algorithm to search for synonyms or similar.",
        "name": "filteredOptions",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "Optionally hide the label visually.\nNot recommended, but can be considered for e.g. search fields in the top menu.",
        "name": "hideLabel",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inputClassName": {
        "defaultValue": null,
        "description": "Custom class name for the input field.\n\nIf used for styling, please consider using tokens instead.",
        "name": "inputClassName",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isListOpen": {
        "defaultValue": null,
        "description": "Controlled open/closed state for the dropdown list",
        "name": "isListOpen",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isLoading": {
        "defaultValue": null,
        "description": "Set to \"true\" when doing an async search and waiting for new filteredOptions.\n\nWill show a spinner in the dropdown and announce to screen readers that it is loading.",
        "name": "isLoading",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isMultiSelect": {
        "defaultValue": null,
        "description": "Set to \"true\" to allow multiple selections\n\nThis will display selected values as a list of Chips in front of the input field, instead of a selection replacing the value of the input.",
        "name": "isMultiSelect",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onToggleSelected": {
        "defaultValue": null,
        "description": "Callback function triggered whenever an option is selected or de-selected\n@param option\n@param isSelected - Whether the option has been selected or unselected\n@param isCustomOption - Whether the option comes from user input, instead of from the list\n@returns",
        "name": "onToggleSelected",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((option: string, isSelected: boolean, isCustomOption: boolean) => void)"
        }
      },
      "selectedOptions": {
        "defaultValue": null,
        "description": "List of selected options.\n\nUse this prop when controlling the selected state outside for the component,\ne.g. for a filter, where options can be toggled elsewhere/programmatically.",
        "name": "selectedOptions",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "shouldAutocomplete": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Set to \"true\" to enable inline autocomplete.",
        "name": "shouldAutocomplete",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shouldShowSelectedOptions": {
        "defaultValue": {
          "value": "true"
        },
        "description": "When set to \"true\" displays selected options as Chips before the input field",
        "name": "shouldShowSelectedOptions",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "toggleListButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "When set to \"true\" displays the toggle button for opening/closing the dropdown list",
        "name": "toggleListButton",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "toggleListButtonLabel": {
        "defaultValue": {
          "value": "\"Alternativer\""
        },
        "description": "Custom name for the toggle list-button. Requires \"toggleListButton\" to be \"true\".",
        "name": "toggleListButtonLabel",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/ComboboxProvider.tsx",
    "displayName": "ComboboxProvider",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Combobox label",
        "name": "label",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "options": {
        "defaultValue": null,
        "description": "List of options to use for autocompletion",
        "name": "options",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string[]"
        }
      },
      "allowNewValues": {
        "defaultValue": null,
        "description": "If enabled, adds an option to add the value of the input as an option whenever there are no options matching the value.",
        "name": "allowNewValues",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearButton": {
        "defaultValue": null,
        "description": "If \"true\" adds a button to clear the value in the input field",
        "name": "clearButton",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearButtonLabel": {
        "defaultValue": {
          "value": "\"Tøm\""
        },
        "description": "Custom name for the clear button. Requires \"clearButton\" to be \"true\".",
        "name": "clearButtonLabel",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "filteredOptions": {
        "defaultValue": null,
        "description": "A list of options to display in the dropdown list.\nIf provided, this overrides the internal search logic in the component.\nUseful for e.g. searching on a server or when overriding the search algorithm to search for synonyms or similar.",
        "name": "filteredOptions",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "Optionally hide the label visually.\nNot recommended, but can be considered for e.g. search fields in the top menu.",
        "name": "hideLabel",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inputClassName": {
        "defaultValue": null,
        "description": "Custom class name for the input field.\n\nIf used for styling, please consider using tokens instead.",
        "name": "inputClassName",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isListOpen": {
        "defaultValue": null,
        "description": "Controlled open/closed state for the dropdown list",
        "name": "isListOpen",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isLoading": {
        "defaultValue": null,
        "description": "Set to \"true\" when doing an async search and waiting for new filteredOptions.\n\nWill show a spinner in the dropdown and announce to screen readers that it is loading.",
        "name": "isLoading",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isMultiSelect": {
        "defaultValue": null,
        "description": "Set to \"true\" to allow multiple selections\n\nThis will display selected values as a list of Chips in front of the input field, instead of a selection replacing the value of the input.",
        "name": "isMultiSelect",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback function triggered whenever the value of the input field is triggered.\n@param event\n@returns",
        "name": "onChange",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((event: ChangeEvent<HTMLInputElement> | null, value?: string) => void)"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "Callback function triggered whenever the input field is cleared\n@param event\n@returns",
        "name": "onClear",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((event: PointerEvent<Element> | KeyboardEvent<Element>) => void)"
        }
      },
      "onToggleSelected": {
        "defaultValue": null,
        "description": "Callback function triggered whenever an option is selected or de-selected\n@param option\n@param isSelected - Whether the option has been selected or unselected\n@param isCustomOption - Whether the option comes from user input, instead of from the list\n@returns",
        "name": "onToggleSelected",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((option: string, isSelected: boolean, isCustomOption: boolean) => void)"
        }
      },
      "selectedOptions": {
        "defaultValue": null,
        "description": "List of selected options.\n\nUse this prop when controlling the selected state outside for the component,\ne.g. for a filter, where options can be toggled elsewhere/programmatically.",
        "name": "selectedOptions",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "shouldAutocomplete": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Set to \"true\" to enable inline autocomplete.",
        "name": "shouldAutocomplete",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shouldShowSelectedOptions": {
        "defaultValue": {
          "value": "true"
        },
        "description": "When set to \"true\" displays selected options as Chips before the input field",
        "name": "shouldShowSelectedOptions",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "toggleListButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "When set to \"true\" displays the toggle button for opening/closing the dropdown list",
        "name": "toggleListButton",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "toggleListButtonLabel": {
        "defaultValue": {
          "value": "\"Alternativer\""
        },
        "description": "Custom name for the toggle list-button. Requires \"toggleListButton\" to be \"true\".",
        "name": "toggleListButtonLabel",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Set this to override the value of the input field.\n\nThis converts the input to a controlled input, so you have to use onChange to update the value.",
        "name": "value",
        "parent": {
          "fileName": "react/src/form/combobox/types.ts",
          "name": "ComboboxProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/combobox/types.ts",
            "name": "ComboboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/ComboboxWrapper.tsx",
    "displayName": "ComboboxWrapper",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "src/form/combobox/ComboboxWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hasError": {
        "defaultValue": null,
        "description": "",
        "name": "hasError",
        "declarations": [
          {
            "fileName": "src/form/combobox/ComboboxWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "inputProps": {
        "defaultValue": null,
        "description": "",
        "name": "inputProps",
        "declarations": [
          {
            "fileName": "src/form/combobox/ComboboxWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "{ disabled?: boolean | undefined; }"
        }
      },
      "inputSize": {
        "defaultValue": null,
        "description": "",
        "name": "inputSize",
        "declarations": [
          {
            "fileName": "src/form/combobox/ComboboxWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "toggleIsListOpen": {
        "defaultValue": null,
        "description": "",
        "name": "toggleIsListOpen",
        "declarations": [
          {
            "fileName": "src/form/combobox/ComboboxWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(isListOpen: boolean) => void"
        }
      },
      "toggleListButtonRef": {
        "defaultValue": null,
        "description": "",
        "name": "toggleListButtonRef",
        "declarations": [
          {
            "fileName": "src/form/combobox/ComboboxWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "RefObject<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/ToggleListButton.tsx",
    "displayName": "ToggleListButton",
    "props": {
      "toggleListButtonLabel": {
        "defaultValue": null,
        "description": "",
        "name": "toggleListButtonLabel",
        "parent": {
          "fileName": "src/form/combobox/ToggleListButton.tsx",
          "name": "ToggleListButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/form/combobox/ToggleListButton.tsx",
            "name": "ToggleListButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/customOptionsContext.tsx",
    "displayName": "CustomOptionsProvider",
    "props": {}
  },
  {
    "filePath": "src/form/error-summary/ErrorSummary.tsx",
    "displayName": "ErrorSummary",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Collectipn of ErrorSummary.Item",
        "name": "children",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummary.tsx",
          "name": "ErrorSummaryProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummary.tsx",
            "name": "ErrorSummaryProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"medium\""
        },
        "description": "Changes padding and font-sizes",
        "name": "size",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummary.tsx",
          "name": "ErrorSummaryProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummary.tsx",
            "name": "ErrorSummaryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "heading": {
        "defaultValue": null,
        "description": "Heading above links",
        "name": "heading",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummary.tsx",
          "name": "ErrorSummaryProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummary.tsx",
            "name": "ErrorSummaryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "headingTag": {
        "defaultValue": {
          "value": "\"h2\""
        },
        "description": "Allows setting a different HTML h-tag",
        "name": "headingTag",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummary.tsx",
          "name": "ErrorSummaryProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummary.tsx",
            "name": "ErrorSummaryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ElementType<any>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/error-summary/ErrorSummaryItem.tsx",
    "displayName": "ErrorSummaryItem",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Link text",
        "name": "children",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummaryItem.tsx",
          "name": "ErrorSummaryItemProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummaryItem.tsx",
            "name": "ErrorSummaryItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "href": {
        "defaultValue": null,
        "description": "Link to errormessage",
        "name": "href",
        "parent": {
          "fileName": "src/form/error-summary/ErrorSummaryItem.tsx",
          "name": "ErrorSummaryItemProps"
        },
        "declarations": [
          {
            "fileName": "src/form/error-summary/ErrorSummaryItem.tsx",
            "name": "ErrorSummaryItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLAnchorElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/radio/Radio.tsx",
    "displayName": "Radio",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Radio label",
        "name": "children",
        "parent": {
          "fileName": "src/form/radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the HTML element",
        "name": "value",
        "parent": {
          "fileName": "src/form/radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of Radio",
        "name": "description",
        "parent": {
          "fileName": "src/form/radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/radio/RadioGroup.tsx",
    "displayName": "RadioGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Collection of <Radio />-elements",
        "name": "children",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Override internal name",
        "name": "name",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default checked Radio",
        "name": "defaultValue",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled state for Radio",
        "name": "value",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "onChange": {
        "defaultValue": {
          "value": "() => {}"
        },
        "description": "Returns current checked Radio in group",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: any) => void)"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Tells Fieldset if group is required",
        "name": "required",
        "parent": {
          "fileName": "src/form/radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "legend": {
        "defaultValue": null,
        "description": "Fieldset legend",
        "name": "legend",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLegend": {
        "defaultValue": null,
        "description": "If enabled shows the legend and description for screenreaders only",
        "name": "hideLegend",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "nativeReadOnly": {
        "defaultValue": null,
        "description": "",
        "name": "nativeReadOnly",
        "parent": {
          "fileName": "react/src/form/Fieldset/Fieldset.tsx",
          "name": "FieldsetProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/Fieldset/Fieldset.tsx",
            "name": "FieldsetProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Read only-state",
        "name": "readOnly",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLFieldSetElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/search/Search.tsx",
    "displayName": "Search",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Search label\n@note Will be hidden by default, is required for accessibility reasons.",
        "name": "label",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "hideLabel": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Shows label and description for screenreaders-only",
        "name": "hideLabel",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback for value-change in input",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string) => void)"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "Callback for click on clear-button or Escape keydown",
        "name": "onClear",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((e: SearchClearEvent) => void)"
        }
      },
      "onSearchClick": {
        "defaultValue": null,
        "description": "Callback for Search-button submit",
        "name": "onSearchClick",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((value: string) => void)"
        }
      },
      "clearButtonLabel": {
        "defaultValue": {
          "value": "\"Tøm\""
        },
        "description": "aria-label on clear button",
        "name": "clearButtonLabel",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If false, removes clear-button option from input.",
        "name": "clearButton",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"primary\""
        },
        "description": "Changes button-variant, \"simple\" removes button",
        "name": "variant",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"simple\""
        }
      },
      "htmlSize": {
        "defaultValue": null,
        "description": "Exposes the HTML size attribute",
        "name": "htmlSize",
        "parent": {
          "fileName": "src/form/search/Search.tsx",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/Search.tsx",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message for element",
        "name": "error",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "errorId": {
        "defaultValue": null,
        "description": "Override internal errorId",
        "name": "errorId",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Changes font-size, padding and gaps",
        "name": "size",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables element\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Adds a description to extend labling of a field",
        "name": "description",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Override internal id",
        "name": "id",
        "parent": {
          "fileName": "react/src/form/useFormField.ts",
          "name": "FormFieldProps"
        },
        "declarations": [
          {
            "fileName": "react/src/form/useFormField.ts",
            "name": "FormFieldProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/search/SearchButton.tsx",
    "displayName": "SearchButton",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Text set after <Search/> icon",
        "name": "children",
        "parent": {
          "fileName": "src/form/search/SearchButton.tsx",
          "name": "SearchButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/form/search/SearchButton.tsx",
            "name": "SearchButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Prevent the user from interacting with the button: it cannot be pressed or focused.\n@note Avoid using if possible for accessibility purposes",
        "name": "disabled",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Replaces button content with a Loader component, keeps width",
        "name": "loading",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Button Icon",
        "name": "icon",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "iconPosition": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Icon position in Button",
        "name": "iconPosition",
        "parent": {
          "fileName": "react/src/button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/src/button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/bleed/Bleed.tsx",
    "displayName": "Bleed",
    "props": {
      "marginInline": {
        "defaultValue": null,
        "description": "**Negative** horizontal margin around children.\nAccepts a spacing token or an object of spacing tokens for different breakpoints.\n@example marginInline='4'\nmarginInline='4 5'\nmarginInline={{xs: '0 32', sm: '3', md: '4 5', lg: '5', xl: '6'}}",
        "name": "marginInline",
        "parent": {
          "fileName": "src/layout/bleed/Bleed.tsx",
          "name": "BleedProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/bleed/Bleed.tsx",
            "name": "BleedProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<BleedSpacingInline | \"full full\" | \"full px\" | \"full 0\" | \"full 05\" | \"full 1\" | \"full 2\" | \"full 3\" | \"full 4\" | \"full 5\" | \"full 6\" | \"full 7\" | \"full 8\" | ... 471 more ... | \"32 32\">"
        }
      },
      "marginBlock": {
        "defaultValue": null,
        "description": "**Negative** vertical margin around children.\nAccepts a spacing token or an object of spacing tokens for different breakpoints.\n@example marginBlock='4'\nmarginBlock='4 5'\nmarginBlock={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}",
        "name": "marginBlock",
        "parent": {
          "fileName": "src/layout/bleed/Bleed.tsx",
          "name": "BleedProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/bleed/Bleed.tsx",
            "name": "BleedProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"px px\" | \"px 0\" | \"px 05\" | \"px 1\" | \"px 2\" | \"px 3\" | \"px 4\" | \"px 5\" | \"px 6\" | \"px 7\" | \"px 8\" | \"px 9\" | \"px 10\" | \"px 11\" | \"px 12\" | \"px 14\" | \"px 16\" | \"px 18\" | \"px 20\" | ... 422 more ... | BleedSpacingBlock>"
        }
      },
      "reflectivePadding": {
        "defaultValue": null,
        "description": "When true, set the padding to mirror the margin.\nThis maintains the apparent width of the element prior to adding Bleed.\nWhen this is used with `asChild`, it will overwrite the padding of the child.",
        "name": "reflectivePadding",
        "parent": {
          "fileName": "src/layout/bleed/Bleed.tsx",
          "name": "BleedProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/bleed/Bleed.tsx",
            "name": "BleedProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "asChild": {
        "defaultValue": null,
        "description": "When true, the Bleed will render as its child. This merges classes, styles and event handlers.",
        "name": "asChild",
        "parent": {
          "fileName": "src/layout/bleed/Bleed.tsx",
          "name": "BleedProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/bleed/Bleed.tsx",
            "name": "BleedProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/box/Box.tsx",
    "displayName": "Box",
    "props": {
      "background": {
        "defaultValue": null,
        "description": "Background color. Accepts a color token.",
        "name": "background",
        "parent": {
          "fileName": "src/layout/box/Box.tsx",
          "name": "BoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/box/Box.tsx",
            "name": "BoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BackgroundToken"
        }
      },
      "borderColor": {
        "defaultValue": null,
        "description": "Border color. Accepts a color token.",
        "name": "borderColor",
        "parent": {
          "fileName": "src/layout/box/Box.tsx",
          "name": "BoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/box/Box.tsx",
            "name": "BoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"border-default\" | \"border-strong\" | \"border-divider\" | \"border-subtle\" | \"border-action-selected\" | \"border-action\" | \"border-selected\" | \"border-success\" | \"border-danger\" | ... 9 more ..."
        }
      },
      "borderRadius": {
        "defaultValue": null,
        "description": "Border radius. Accepts a radius token, or an object of radius tokens for different breakpoints.\n@example borderRadius='full'\nborderRadius='0 full large small'\nborderRadius={{xs: 'small large', sm: '0', md: 'large', lg: 'full'}}",
        "name": "borderRadius",
        "parent": {
          "fileName": "src/layout/box/Box.tsx",
          "name": "BoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/box/Box.tsx",
            "name": "BoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<SpaceDelimitedAttribute<BorderRadiiToken>>"
        }
      },
      "borderWidth": {
        "defaultValue": null,
        "description": "Border-width. If this is not set there will be no border.\n@example borderWidth='2'\nborderWidth='1 2 3 4'",
        "name": "borderWidth",
        "parent": {
          "fileName": "src/layout/box/Box.tsx",
          "name": "BoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/box/Box.tsx",
            "name": "BoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SpaceDelimitedAttribute<\"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\">"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Spacing around children. Accepts a spacing token or an object of spacing tokens for different breakpoints.\n@example padding='4'\npadding={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}",
        "name": "padding",
        "parent": {
          "fileName": "src/layout/box/Box.tsx",
          "name": "BoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/box/Box.tsx",
            "name": "BoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<SpacingScale>"
        }
      },
      "paddingInline": {
        "defaultValue": null,
        "description": "Horizontal padding around children. Accepts a spacing token or an object of spacing tokens for different breakpoints.\n@example paddingInline='4'\npaddingInline='4 5'\npaddingInline={{xs: '0 32', sm: '3', md: '4 5', lg: '5', xl: '6'}}",
        "name": "paddingInline",
        "parent": {
          "fileName": "src/layout/box/Box.tsx",
          "name": "BoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/box/Box.tsx",
            "name": "BoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"0 0\" | \"0 1\" | \"0 2\" | \"0 3\" | \"0 4\" | \"0 5\" | \"1 0\" | \"1 1\" | \"1 2\" | \"1 3\" | \"1 4\" | \"1 5\" | \"2 0\" | \"2 1\" | \"2 2\" | \"2 3\" | \"2 4\" | \"2 5\" | \"3 0\" | \"3 1\" | \"3 2\" | \"3 3\" | \"3 4\" | ... 377 more ... | \"32 32\">"
        }
      },
      "paddingBlock": {
        "defaultValue": null,
        "description": "Vertical padding around children. Accepts a spacing token or an object of spacing tokens for different breakpoints.\n@example paddingBlock='4'\npaddingBlock='4 5'\npaddingBlock={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}",
        "name": "paddingBlock",
        "parent": {
          "fileName": "src/layout/box/Box.tsx",
          "name": "BoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/box/Box.tsx",
            "name": "BoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"0 0\" | \"0 1\" | \"0 2\" | \"0 3\" | \"0 4\" | \"0 5\" | \"1 0\" | \"1 1\" | \"1 2\" | \"1 3\" | \"1 4\" | \"1 5\" | \"2 0\" | \"2 1\" | \"2 2\" | \"2 3\" | \"2 4\" | \"2 5\" | \"3 0\" | \"3 1\" | \"3 2\" | \"3 3\" | \"3 4\" | ... 377 more ... | \"32 32\">"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Shadow on box. Accepts a shadow token.\n@example shadow='small'",
        "name": "shadow",
        "parent": {
          "fileName": "src/layout/box/Box.tsx",
          "name": "BoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/box/Box.tsx",
            "name": "BoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xsmall\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/content-container/ContentContainer.tsx",
    "displayName": "ContentContainer",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "ContentContainer content",
        "name": "children",
        "parent": {
          "fileName": "src/layout/content-container/ContentContainer.tsx",
          "name": "ContentContainerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/content-container/ContentContainer.tsx",
            "name": "ContentContainerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/grid/HGrid.tsx",
    "displayName": "HGrid",
    "props": {
      "columns": {
        "defaultValue": null,
        "description": "Number of columns to display. Can be a number, a string with a unit or tokens for spesific breakpoints.\nSets `grid-template-columns`, so `fr`, `minmax` etc. works.\n@example columns={{ sm: 1, md: 1, lg: \"1fr auto\", xl: \"1fr auto\"}}\n@example columns={3}\n@example columns=\"repeat(3, minmax(0, 1fr))\"",
        "name": "columns",
        "parent": {
          "fileName": "src/layout/grid/HGrid.tsx",
          "name": "HGridProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/grid/HGrid.tsx",
            "name": "HGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<string | number>"
        }
      },
      "gap": {
        "defaultValue": null,
        "description": "Spacing between columns. Based on spacing-tokens.\n@example gap=\"6\"\ngap={{ sm: \"2\", md: \"2\", lg: \"6\", xl: \"6\"}}",
        "name": "gap",
        "parent": {
          "fileName": "src/layout/grid/HGrid.tsx",
          "name": "HGridProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/grid/HGrid.tsx",
            "name": "HGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<SpacingScale>"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Vertical alignment of children. Elements will by default stretch to the height of parent-element.",
        "name": "align",
        "parent": {
          "fileName": "src/layout/grid/HGrid.tsx",
          "name": "HGridProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/grid/HGrid.tsx",
            "name": "HGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"center\" | \"end\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/responsive/Responsive.tsx",
    "displayName": "Hide",
    "props": {
      "above": {
        "defaultValue": null,
        "description": "@example above='md'",
        "name": "above",
        "parent": {
          "fileName": "src/layout/responsive/Responsive.tsx",
          "name": "ResponsiveProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/responsive/Responsive.tsx",
            "name": "ResponsiveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "below": {
        "defaultValue": null,
        "description": "@example below='md'",
        "name": "below",
        "parent": {
          "fileName": "src/layout/responsive/Responsive.tsx",
          "name": "ResponsiveProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/responsive/Responsive.tsx",
            "name": "ResponsiveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "as": {
        "defaultValue": {
          "value": "\"div\""
        },
        "description": "Overrides html-tag",
        "name": "as",
        "parent": {
          "fileName": "src/layout/responsive/Responsive.tsx",
          "name": "ResponsiveProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/responsive/Responsive.tsx",
            "name": "ResponsiveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"div\" | \"span\""
        }
      },
      "asChild": {
        "defaultValue": null,
        "description": "When true, will render element as its child. This merges classes, styles and event handlers.",
        "name": "asChild",
        "parent": {
          "fileName": "src/layout/responsive/Responsive.tsx",
          "name": "ResponsiveProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/responsive/Responsive.tsx",
            "name": "ResponsiveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/responsive/Responsive.tsx",
    "displayName": "Show",
    "props": {
      "above": {
        "defaultValue": null,
        "description": "@example above='md'",
        "name": "above",
        "parent": {
          "fileName": "src/layout/responsive/Responsive.tsx",
          "name": "ResponsiveProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/responsive/Responsive.tsx",
            "name": "ResponsiveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "below": {
        "defaultValue": null,
        "description": "@example below='md'",
        "name": "below",
        "parent": {
          "fileName": "src/layout/responsive/Responsive.tsx",
          "name": "ResponsiveProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/responsive/Responsive.tsx",
            "name": "ResponsiveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"sm\" | \"md\" | \"lg\" | \"xl\""
        }
      },
      "as": {
        "defaultValue": {
          "value": "\"div\""
        },
        "description": "Overrides html-tag",
        "name": "as",
        "parent": {
          "fileName": "src/layout/responsive/Responsive.tsx",
          "name": "ResponsiveProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/responsive/Responsive.tsx",
            "name": "ResponsiveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"div\" | \"span\""
        }
      },
      "asChild": {
        "defaultValue": null,
        "description": "When true, will render element as its child. This merges classes, styles and event handlers.",
        "name": "asChild",
        "parent": {
          "fileName": "src/layout/responsive/Responsive.tsx",
          "name": "ResponsiveProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/responsive/Responsive.tsx",
            "name": "ResponsiveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/sidemal-test/AvatarPanel.tsx",
    "displayName": "AvatarPanel",
    "props": {}
  },
  {
    "filePath": "src/layout/stack/HStack.tsx",
    "displayName": "HStack",
    "props": {
      "justify": {
        "defaultValue": null,
        "description": "Justify-content",
        "name": "justify",
        "parent": {
          "fileName": "react/src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "react/src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"start\" | \"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\">"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Align-items",
        "name": "align",
        "parent": {
          "fileName": "react/src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "react/src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\">"
        }
      },
      "wrap": {
        "defaultValue": null,
        "description": "flex-wrap",
        "name": "wrap",
        "parent": {
          "fileName": "react/src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "react/src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "gap": {
        "defaultValue": null,
        "description": "@example gap='4'\ngap={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}",
        "name": "gap",
        "parent": {
          "fileName": "react/src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "react/src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<SpacingScale>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/stack/Spacer.tsx",
    "displayName": "Spacer",
    "props": {}
  },
  {
    "filePath": "src/layout/stack/Stack.tsx",
    "displayName": "Stack",
    "props": {
      "justify": {
        "defaultValue": null,
        "description": "Justify-content",
        "name": "justify",
        "parent": {
          "fileName": "src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"start\" | \"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\">"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Align-items",
        "name": "align",
        "parent": {
          "fileName": "src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\">"
        }
      },
      "wrap": {
        "defaultValue": {
          "value": "true"
        },
        "description": "flex-wrap",
        "name": "wrap",
        "parent": {
          "fileName": "src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "gap": {
        "defaultValue": null,
        "description": "@example gap='4'\ngap={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}",
        "name": "gap",
        "parent": {
          "fileName": "src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<SpacingScale>"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "row"
        },
        "description": "flex-direction",
        "name": "direction",
        "parent": {
          "fileName": "src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"row\" | \"column\">"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/layout/stack/VStack.tsx",
    "displayName": "VStack",
    "props": {
      "justify": {
        "defaultValue": null,
        "description": "Justify-content",
        "name": "justify",
        "parent": {
          "fileName": "react/src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "react/src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"start\" | \"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\">"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Align-items",
        "name": "align",
        "parent": {
          "fileName": "react/src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "react/src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<\"start\" | \"center\" | \"end\" | \"baseline\" | \"stretch\">"
        }
      },
      "gap": {
        "defaultValue": null,
        "description": "@example gap='4'\ngap={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}",
        "name": "gap",
        "parent": {
          "fileName": "react/src/layout/stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "react/src/layout/stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ResponsiveProp<SpacingScale>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  },
  {
    "filePath": "src/timeline/period/NonClickablePeriod.tsx",
    "displayName": "NonClickablePeriod",
    "props": {
      "periodRef": {
        "defaultValue": null,
        "description": "",
        "name": "periodRef",
        "parent": {
          "fileName": "src/timeline/period/NonClickablePeriod.tsx",
          "name": "TimelineNonClickablePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/NonClickablePeriod.tsx",
            "name": "TimelineNonClickablePeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ForwardedRef<HTMLDivElement>"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "",
        "name": "start",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "",
        "name": "end",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "status": {
        "defaultValue": null,
        "description": "",
        "name": "status",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "cropped": {
        "defaultValue": null,
        "description": "",
        "name": "cropped",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "",
        "name": "direction",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "left": {
        "defaultValue": null,
        "description": "",
        "name": "left",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "statusLabel": {
        "defaultValue": null,
        "description": "",
        "name": "statusLabel",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "restProps": {
        "defaultValue": null,
        "description": "",
        "name": "restProps",
        "parent": {
          "fileName": "react/src/timeline/period/index.tsx",
          "name": "PeriodProps"
        },
        "declarations": [
          {
            "fileName": "react/src/timeline/period/index.tsx",
            "name": "PeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "filePath": "src/timeline/period/index.tsx",
    "displayName": "Period",
    "props": {
      "start": {
        "defaultValue": null,
        "description": "Period start date.",
        "name": "start",
        "parent": {
          "fileName": "src/timeline/period/index.tsx",
          "name": "TimelinePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/index.tsx",
            "name": "TimelinePeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "Period end date.",
        "name": "end",
        "parent": {
          "fileName": "src/timeline/period/index.tsx",
          "name": "TimelinePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/index.tsx",
            "name": "TimelinePeriodProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon for easier visual identification.",
        "name": "icon",
        "parent": {
          "fileName": "src/timeline/period/index.tsx",
          "name": "TimelinePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/index.tsx",
            "name": "TimelinePeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "status": {
        "defaultValue": {
          "value": "\"neutral\""
        },
        "description": "Period status.",
        "name": "status",
        "parent": {
          "fileName": "src/timeline/period/index.tsx",
          "name": "TimelinePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/index.tsx",
            "name": "TimelinePeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"success\" | \"warning\" | \"danger\" | \"info\" | \"neutral\""
        }
      },
      "statusLabel": {
        "defaultValue": null,
        "description": "Status label for screen-readers\ne.g \"Sykemeldt\", \"foreldrepermisjon\"",
        "name": "statusLabel",
        "parent": {
          "fileName": "src/timeline/period/index.tsx",
          "name": "TimelinePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/index.tsx",
            "name": "TimelinePeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onSelectPeriod": {
        "defaultValue": null,
        "description": "Callback when selecting a period.",
        "name": "onSelectPeriod",
        "parent": {
          "fileName": "src/timeline/period/index.tsx",
          "name": "TimelinePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/index.tsx",
            "name": "TimelinePeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content displayed in Popover on click.",
        "name": "children",
        "parent": {
          "fileName": "src/timeline/period/index.tsx",
          "name": "TimelinePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/index.tsx",
            "name": "TimelinePeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "isActive": {
        "defaultValue": null,
        "description": "Visual active inidcation on period\n@note Make sure only one period is active at a time",
        "name": "isActive",
        "parent": {
          "fileName": "src/timeline/period/index.tsx",
          "name": "TimelinePeriodProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/period/index.tsx",
            "name": "TimelinePeriodProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement | HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/timeline/zoom/ZoomButton.tsx",
    "displayName": "ZoomButton",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "e.g 3mnd, 6mnd etc",
        "name": "label",
        "parent": {
          "fileName": "src/timeline/zoom/ZoomButton.tsx",
          "name": "TimelineZoomButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/zoom/ZoomButton.tsx",
            "name": "TimelineZoomButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "interval": {
        "defaultValue": null,
        "description": "Zoom interval in months or years",
        "name": "interval",
        "parent": {
          "fileName": "src/timeline/zoom/ZoomButton.tsx",
          "name": "TimelineZoomButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/zoom/ZoomButton.tsx",
            "name": "TimelineZoomButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "\"month\" | \"year\""
        }
      },
      "count": {
        "defaultValue": null,
        "description": "How many units of the interval that will be applied\ne.g interval=\"month\" + count={3} equals 3 months",
        "name": "count",
        "parent": {
          "fileName": "src/timeline/zoom/ZoomButton.tsx",
          "name": "TimelineZoomButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/timeline/zoom/ZoomButton.tsx",
            "name": "TimelineZoomButtonProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/timeline/zoom/index.tsx",
    "displayName": "Zoom",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLUListElement>"
        }
      }
    }
  },
  {
    "filePath": "src/date/datepicker/parts/Caption.tsx",
    "displayName": "DatePickerCaption",
    "props": {}
  },
  {
    "filePath": "src/date/datepicker/parts/Caption.tsx",
    "displayName": "Caption",
    "props": {}
  },
  {
    "filePath": "src/date/datepicker/parts/DayButton.tsx",
    "displayName": "DayButton",
    "props": {}
  },
  {
    "filePath": "src/date/datepicker/parts/DropdownCaption.tsx",
    "displayName": "DropdownCaption",
    "props": {}
  },
  {
    "filePath": "src/date/datepicker/parts/HeadRow.tsx",
    "displayName": "HeadRow",
    "props": {}
  },
  {
    "filePath": "src/date/datepicker/parts/HeadRow.tsx",
    "displayName": "getWeekdays",
    "props": {}
  },
  {
    "filePath": "src/date/datepicker/parts/Row.tsx",
    "displayName": "Row",
    "props": {
      "displayMonth": {
        "defaultValue": null,
        "description": "The month where the row is displayed.",
        "name": "displayMonth",
        "parent": {
          "fileName": "src/date/datepicker/parts/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/parts/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "weekNumber": {
        "defaultValue": null,
        "description": "The number of the week to render.",
        "name": "weekNumber",
        "parent": {
          "fileName": "src/date/datepicker/parts/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/parts/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "dates": {
        "defaultValue": null,
        "description": "The days contained in the week.",
        "name": "dates",
        "parent": {
          "fileName": "src/date/datepicker/parts/Row.tsx",
          "name": "RowProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/parts/Row.tsx",
            "name": "RowProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date[]"
        }
      }
    }
  },
  {
    "filePath": "src/date/datepicker/parts/TableHead.tsx",
    "displayName": "TableHead",
    "props": {}
  },
  {
    "filePath": "src/date/datepicker/parts/WeekNumber.tsx",
    "displayName": "WeekNumber",
    "props": {
      "number": {
        "defaultValue": null,
        "description": "The number of the week.",
        "name": "number",
        "parent": {
          "fileName": "src/date/datepicker/parts/WeekNumber.tsx",
          "name": "WeekNumberProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/parts/WeekNumber.tsx",
            "name": "WeekNumberProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "dates": {
        "defaultValue": null,
        "description": "The dates in the week.",
        "name": "dates",
        "parent": {
          "fileName": "src/date/datepicker/parts/WeekNumber.tsx",
          "name": "WeekNumberProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/parts/WeekNumber.tsx",
            "name": "WeekNumberProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date[]"
        }
      },
      "headerVersion": {
        "defaultValue": null,
        "description": "",
        "name": "headerVersion",
        "parent": {
          "fileName": "src/date/datepicker/parts/WeekNumber.tsx",
          "name": "WeekNumberProps"
        },
        "declarations": [
          {
            "fileName": "src/date/datepicker/parts/WeekNumber.tsx",
            "name": "WeekNumberProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "filePath": "src/date/datepicker/parts/WeekRow.tsx",
    "displayName": "WeekRow",
    "props": {
      "displayMonth": {
        "defaultValue": null,
        "description": "",
        "name": "displayMonth",
        "declarations": [
          {
            "fileName": "src/date/datepicker/parts/WeekRow.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Menu/GroupedList/GroupedHeading.tsx",
    "displayName": "GroupedHeading",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Heading",
        "name": "children",
        "parent": {
          "fileName": "src/dropdown/Menu/GroupedList/GroupedHeading.tsx",
          "name": "GroupedHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/GroupedList/GroupedHeading.tsx",
            "name": "GroupedHeadingProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDetailsElement>"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Menu/GroupedList/GroupedItem.tsx",
    "displayName": "GroupedItem",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Menu item content",
        "name": "children",
        "parent": {
          "fileName": "src/dropdown/Menu/GroupedList/GroupedItem.tsx",
          "name": "GroupedItemProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/GroupedList/GroupedItem.tsx",
            "name": "GroupedItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Menu/GroupedList/index.tsx",
    "displayName": "DescriptionList",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Menu list content",
        "name": "children",
        "parent": {
          "fileName": "src/dropdown/Menu/GroupedList/index.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/GroupedList/index.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDListElement>"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Menu/List/Item.tsx",
    "displayName": "ListItem",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Menu item content",
        "name": "children",
        "parent": {
          "fileName": "src/dropdown/Menu/List/Item.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/List/Item.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "filePath": "src/dropdown/Menu/List/index.tsx",
    "displayName": "Dropdown.Menu.List",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Menu list content",
        "name": "children",
        "parent": {
          "fileName": "src/dropdown/Menu/List/index.tsx",
          "name": "ListProps"
        },
        "declarations": [
          {
            "fileName": "src/dropdown/Menu/List/index.tsx",
            "name": "ListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLUListElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/FilteredOptions/filteredOptionsContext.tsx",
    "displayName": "FilteredOptionsProvider",
    "props": {
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/Input/Input.tsx",
    "displayName": "Input",
    "props": {
      "inputClassName": {
        "defaultValue": null,
        "description": "",
        "name": "inputClassName",
        "parent": {
          "fileName": "src/form/combobox/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/combobox/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "src/form/combobox/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/combobox/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement>"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/Input/inputContext.tsx",
    "displayName": "InputContextProvider",
    "props": {
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/SelectedOptions/SelectedOptions.tsx",
    "displayName": "SelectedOptions",
    "props": {
      "selectedOptions": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "",
        "name": "selectedOptions",
        "parent": {
          "fileName": "src/form/combobox/SelectedOptions/SelectedOptions.tsx",
          "name": "SelectedOptionsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/combobox/SelectedOptions/SelectedOptions.tsx",
            "name": "SelectedOptionsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/form/combobox/SelectedOptions/SelectedOptions.tsx",
          "name": "SelectedOptionsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/combobox/SelectedOptions/SelectedOptions.tsx",
            "name": "SelectedOptionsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"medium\" | \"small\""
        }
      }
    }
  },
  {
    "filePath": "src/form/combobox/SelectedOptions/selectedOptionsContext.tsx",
    "displayName": "SelectedOptionsProvider",
    "props": {
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "declarations": [
          {
            "fileName": "src/form/combobox/SelectedOptions/selectedOptionsContext.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Pick<ComboboxProps, \"allowNewValues\" | \"isMultiSelect\" | \"options\" | \"selectedOptions\" | \"onToggleSelected\">"
        }
      }
    }
  },
  {
    "filePath": "src/layout/sidemal-test/content-box/ContentBox.tsx",
    "displayName": "ContentBox",
    "props": {
      "maxWidth": {
        "defaultValue": {
          "value": "xl"
        },
        "description": "",
        "name": "maxWidth",
        "parent": {
          "fileName": "src/layout/sidemal-test/content-box/ContentBox.tsx",
          "name": "ContentBoxProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/sidemal-test/content-box/ContentBox.tsx",
            "name": "ContentBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"3xl\" | \"2xl\" | \"xl\" | \"lg\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
        "name": "ref",
        "parent": {
          "fileName": "aksel/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "aksel/node_modules/@types/react/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<HTMLDivElement>"
        }
      }
    }
  }
]